{"mappings":"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","sources":["src/pages/app/index.ts","src/pages/app/app.jsx"],"sourcesContent":["import { AppPage } from \"./app\";\nexport default AppPage;\n","import { Base64 } from \"js-base64\";\nimport { Component } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport { Column } from \"../../widgets/column/column.jsx\";\nimport { Menu } from \"../../widgets/menu/menu.jsx\";\nimport { initialData } from \"../../entities/task/config/initial-data\";\nimport { STORAGE } from \"../../shared/lib/persistent\";\nimport { fromCall } from \"../../shared/lib/call\";\n\nimport \"./app.scss\";\n\nexport class AppPage extends Component {\n    taskID = 0;\n    columnID = 1;\n\n    expanded = false;\n\n    constructor(props) {\n        super(props);\n\n        this.clear();\n\n        document.addEventListener(\"onlayoutupdated\", () => this.forceUpdate());\n    }\n\n    getTaskID = () => this.taskID;\n\n    getColumnID = () => this.columnID;\n\n    getTasks = () => STORAGE.layout.tasks;\n\n    getColumns = () => STORAGE.layout.columns;\n\n    // TODO delete elements after exjecting from tasklist / columnlist\n\n    /**\n     * returns column ID and index inside column's taskIds for a given taskId\n     *\n     * @param {string} taskId\n     * @returns {object}\n     */\n    static findTaskCoordinates = (taskId) => {\n        let index;\n        const layout = STORAGE.layout;\n        const colId = layout.columnOrder.find((colId) => {\n            index = layout.columns[colId].taskIds.indexOf(taskId);\n            return index >= 0;\n        });\n\n        return { columnId: colId, taskIndex: index };\n    };\n\n    deleteTask = (taskId) => {\n        const layout = STORAGE.layout;\n        const { columnId, taskIndex } = AppPage.findTaskCoordinates(taskId);\n\n        if (columnId == undefined || taskIndex == undefined) {\n            console.error(\"Task not found\");\n            return;\n        }\n\n        const column = layout.columns[columnId];\n        const taskIds = Array.from(column.taskIds);\n        taskIds.splice(taskIndex, 1);\n        const newColumn = {\n            ...column,\n            taskIds: taskIds,\n        };\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [columnId]: newColumn,\n            },\n        };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    duplicateTask = (taskId) => {\n        const layout = STORAGE.layout;\n        const { columnId, taskIndex } = AppPage.findTaskCoordinates(taskId);\n\n        if (columnId == undefined || taskIndex == undefined) {\n            console.error(\"Task not found\");\n            return;\n        }\n\n        // create new task\n        const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n        taskClone.id = `task-${this.taskID}`;\n\n        const column = layout.columns[columnId];\n        const taskIds = Array.from(column.taskIds);\n        taskIds.splice(taskIndex, 0, taskClone.id);\n\n        this.taskID++;\n\n        const newColumn = {\n            ...column,\n            taskIds: taskIds,\n        };\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [columnId]: newColumn,\n            },\n            tasks: {\n                ...layout.tasks,\n                [taskClone.id]: taskClone,\n            },\n        };\n\n        window.COPY = {\n            from: taskId,\n            to: taskClone.id,\n        };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    clear = () => {\n        console.warn(\"layout cleared\");\n\n        // clear card content\n        if (window.TASKS) window.TASKS = [];\n\n        this.taskID = 0;\n        this.columnID = 1;\n\n        window.EDITOR?.edit(null);\n        STORAGE.setLayout(initialData);\n    };\n\n    deleteColumn = (index) => {\n        const layout = STORAGE.layout;\n        const newColumnOrder = Array.from(layout.columnOrder);\n        newColumnOrder.splice(index, 1);\n\n        let newLayout = {\n            ...layout,\n            columnOrder: newColumnOrder,\n        };\n\n        // list should never be empty\n        if (newColumnOrder.length === 0)\n            newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [`column-${this.columnID}`]: {\n                        id: `column-${this.columnID}`,\n                        title: \"Drag here\",\n                        taskIds: [],\n                    },\n                },\n                columnOrder: [`column-${this.columnID++}`],\n            };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    addColumn = () => {\n        const newColumn = {\n            id: `column-${this.columnID}`,\n            title: \"Drag here\",\n            taskIds: [],\n        };\n\n        const layout = STORAGE.layout;\n        const newColumnOrder = Array.from(layout.columnOrder);\n        newColumnOrder.push(`column-${this.columnID}`);\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [`column-${this.columnID}`]: newColumn,\n            },\n            columnOrder: newColumnOrder,\n        };\n\n        this.columnID++;\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    onDragEnd = (result) => {\n        const layout = STORAGE.layout;\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) return;\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n        if (type === \"column\") {\n            const newColumnOrder = Array.from(layout.columnOrder);\n\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n\n            const newLayout = {\n                ...layout,\n                columnOrder: newColumnOrder,\n            };\n\n            STORAGE.setLayout(newLayout);\n\n            return;\n        }\n\n        const start = layout.columns[source.droppableId];\n        const finish = layout.columns[destination.droppableId];\n\n        if (!start || !finish) {\n            console.warn(`Something went wrong when dragging from ${start} to ${finish}`);\n            return;\n        }\n\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            };\n\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            STORAGE.setLayout(newLayout);\n        } else {\n            let newStart;\n\n            if (finish.id === \"menu\") return;\n\n            if (start.id === \"menu\") {\n                const startTaskIds = Array.from(start.taskIds);\n\n                // change taskId\n                const taskId = startTaskIds[source.index];\n                startTaskIds[source.index] = `task-${this.taskID}`;\n\n                // create new task\n                const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n                taskClone.id = `task-${this.taskID}`;\n                STORAGE.layout.tasks[taskClone.id] = taskClone;\n\n                this.taskID++;\n\n                newStart = {\n                    ...start,\n                    taskIds: startTaskIds,\n                };\n            } else {\n                const startTaskIds = Array.from(start.taskIds);\n                startTaskIds.splice(source.index, 1);\n                newStart = {\n                    ...start,\n                    taskIds: startTaskIds,\n                };\n            }\n\n            const finishTaskIds = Array.from(finish.taskIds);\n            finishTaskIds.splice(destination.index, 0, draggableId);\n            const newFinish = {\n                ...finish,\n                taskIds: finishTaskIds,\n            };\n\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [newStart.id]: newStart,\n                    [newFinish.id]: newFinish,\n                },\n            };\n\n            STORAGE.setLayout(newLayout);\n        }\n    };\n\n    fromJSON(json) {\n        this.clear();\n\n        const layout = STORAGE.layout;\n\n        if (!Array.isArray(json) || !json.length) return;\n\n        this.columnID = 0;\n\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu,\n            },\n        };\n\n        for (let c in json) {\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: [],\n            };\n\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn,\n                },\n                columnOrder: newColumnOrder,\n            };\n\n            this.columnID++;\n\n            for (let t in json[c]) {\n                let task = { id: `task-${this.taskID++}`, addr: \"\", func: \"\", json: json[c][t] };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n\n        STORAGE.setLayout(newLayout);\n    }\n\n    fromBase64(json) {\n        this.clear();\n\n        const layout = STORAGE.layout;\n\n        if (!Array.isArray(json) || !json.length) return;\n\n        this.columnID = 0;\n\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu,\n            },\n        };\n\n        for (let c in json) {\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: [],\n            };\n\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn,\n                },\n                columnOrder: newColumnOrder,\n            };\n\n            this.columnID++;\n\n            for (let t in json[c]) {\n                const { address: jsonAddress, actions: jsonActions } = json[c][t];\n                let task = {\n                    id: `task-${this.taskID++}`,\n                    addr: \"\",\n                    func: \"\",\n                    json: {\n                        address: jsonAddress,\n                        actions: jsonActions.map((action) => ({\n                            func: action.func,\n                            args: JSON.parse(Base64.decode(action.args)),\n                            gas: action.gas,\n                            depo: action.depo,\n                        })),\n                    },\n                };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n\n        STORAGE.setLayout(newLayout);\n    }\n\n    toJSON(omitOnError = false) {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        for (let c of layout.columnOrder) {\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds) {\n                const task = TASKS.find((task) => task.id === t);\n                if (task) {\n                    if (omitOnError) {\n                        try {\n                            output[output.length - 1].push(task.instance.current.toCall());\n                        } catch (e) {\n                            continue;\n                        }\n                    } else output[output.length - 1].push(task.instance.current.toCall());\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n\n        return output;\n    }\n\n    toBase64(omitOnError = false) {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        for (let c of layout.columnOrder) {\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds) {\n                const task = TASKS.find((task) => task.id === t);\n                if (task) {\n                    if (omitOnError) {\n                        try {\n                            output[output.length - 1].push(fromCall.toBase64(task.instance.current.toCall()));\n                        } catch (e) {\n                            continue;\n                        }\n                    } else output[output.length - 1].push(fromCall.toBase64(task.instance.current.toCall()));\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n\n        return output;\n    }\n\n    toErrors() {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        if (!window?.TASKS) return output;\n\n        const tasks = TASKS.filter((t) => !layout.columns[\"menu\"].taskIds.includes(t.id)).map(\n            (t) => t.instance.current\n        );\n\n        for (let t of tasks)\n            for (let e of t.schema.errors())\n                output.push({\n                    task: t,\n                    message: e.message,\n                });\n\n        return output;\n    }\n\n    export() {\n        return JSON.stringify({\n            schedules: this.toBase64(),\n        });\n    }\n\n    empty() {\n        const layout = STORAGE.layout;\n        return layout.columnOrder.length === 1 && layout.columns[layout.columnOrder[0]].taskIds.length === 0;\n    }\n\n    setExpanded(expanded) {\n        this.expanded = expanded;\n        this.forceUpdate();\n        SIDEBAR.forceUpdate();\n    }\n\n    componentDidMount() {\n        window.SIDEBAR.switchPage(\"app\");\n        window.LAYOUT = this;\n        STORAGE.load();\n    }\n\n    render() {\n        const layout = STORAGE.layout;\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable\n                    droppableId=\"layout\"\n                    direction=\"horizontal\"\n                    type=\"column\"\n                >\n                    {(provided) => (\n                        <div className=\"layout-wrapper\">\n                            <div\n                                className=\"layout-container\"\n                                tutorial={this.empty() ? \"yes\" : \"no\"}\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                            >\n                                {layout.columnOrder.map((columnId, index) => {\n                                    const column = layout.columns[columnId];\n                                    const tasks = column.taskIds.map((taskId) => layout.tasks[taskId]);\n\n                                    return (\n                                        <Column\n                                            key={column.id}\n                                            column={column}\n                                            tasks={tasks}\n                                            index={index}\n                                        />\n                                    );\n                                })}\n                                {provided.placeholder}\n                            </div>\n                            <div className={`empty-container ${this.expanded ? \"expanded-empty\" : \"\"}`}></div>\n                        </div>\n                    )}\n                </Droppable>\n                <Menu layout={this} />\n            </DragDropContext>\n        );\n    }\n}\n"],"names":["$5a6a34a5140f85ee$export$2e2bcd8739ae039","parcelRequire","AppPage","$kE6vJ","Component","fromJSON","json","this","clear","layout","STORAGE","Array","isArray","length","columnID","newLayout","columnOrder","columns","menu","c","newColumn","id","title","taskIds","newColumnOrder","from","push","t","task","taskID","addr","func","tasks","setLayout","fromBase64","address","jsonAddress","actions","jsonActions","map","action","args","JSON","parse","Base64","decode","gas","depo","toJSON","omitOnError","output","TASKS","find","instance","current","toCall","e","console","warn","toBase64","fromCall","toErrors","window","filter","includes","schema","errors","message","export","stringify","schedules","empty","setExpanded","expanded","forceUpdate","SIDEBAR","componentDidMount","switchPage","LAYOUT","load","render","$bbzbN","jsxs","$8AWvt","DragDropContext","onDragEnd","jsx","Droppable","droppableId","direction","type","provided","className","tutorial","droppableProps","ref","innerRef","columnId","index","column","taskId","$6mD9r","Column","placeholder","$MACsA","Menu","constructor","props","super","getTaskID","getColumnID","getTasks","getColumns","deleteTask","taskIndex","findTaskCoordinates","undefined","error","splice","duplicateTask","taskClone","toString","COPY","to","EDITOR","edit","initialData","deleteColumn","addColumn","result","destination","source","draggableId","start","finish","newTaskIds","newStart","startTaskIds","finishTaskIds","newFinish","document","addEventListener","default","colId","indexOf"],"version":3,"file":"app.f5b1b804.js.map"}