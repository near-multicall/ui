{"mappings":"oeAAA,IACAA,EADAC,EAAA,SACeC,O,oFCDf,IAAAC,EAAAF,EAAA,S,mZAuBMG,EAAMC,SAAOC,qBAebC,EAAW,UACVC,EAvCP,SAuCOC,G,2BAAMP,K,oBAAAA,G,SAAAA,EAgCGQ,G,yBAhCHR,G,cAiCCQ,IA7BVC,uCAASC,OACJC,SACAC,MAAM,CACHC,KAAMH,OACDC,SACAC,MAAM,CACHE,UAAWJ,OAAKK,SAASC,UAAUC,OAAO,CAAEC,SAAS,IACrDC,MAAOT,OAAKK,SAASK,aAAaH,OAAO,CAAEC,SAAS,IACpDG,YAAaX,OAAKK,SAASO,YAAYL,OAAO,CAC1CM,cAAe,yCACfL,SAAS,MAGhBM,WAAU,SAACC,EAAGZ,G,MAAU,CACrBC,UAAWD,EACXM,MAAON,EACPQ,YAAaK,EAAKC,mBAAmBd,G,IAExCI,WAERA,WAELW,qDAAuBC,MAAS,W,OAAMH,EAAKI,a,GAAe,OAG1DC,oCAAc,IAMV,IAAMlB,EAAOmB,UAAQC,UAAUC,I,OAE/BR,EAAKS,MAAQ,CACTC,SAAU,CACNvB,QAGJqB,IAAK,IAAIG,gBAAWxB,GACpBS,UAAW,IAAIgB,eAAUZ,EAAKC,mBAAmBd,IAEjD0B,SAAS,EACTC,UAAU,EACVC,aAAc,MAGlBf,EAAKjB,OAAOiC,MAAMhB,EAAKS,MAAMC,UAE7BE,YAAUK,gBAAgBC,MAAMC,YAC5BnB,EAAKK,IAAMc,EACXnB,EAAKI,aACT,IAEAJ,EAAKoB,SAAW,K,sBAzDX9C,G,CA4DT+C,kB,MAAAA,SAAYC,EAAgCC,GACxCC,KAAKC,SACD,CACIf,UAAU,EAAAgB,EAAAC,SAAA,GACHH,KAAKf,MAAMC,SACXY,IAGXC,EAER,G,CAEAtB,yB,MAAAA,SAAmBd,GACf,OAAOH,OACFK,SACAuC,SACAC,kBACAC,OAAO,IAAMlB,YAAUmB,iBACvBC,KAAK7C,EACd,G,CAQM8C,4B,MAAN,SACIzB,G,OADJ,EAAA0B,EAAAP,UAAA,W,IAIUQ,EACAC,EACAC,EAGAC,EAKAC,EAYIC,E,iEAjBQ,OALZL,GAAcM,SAAIC,KAAKC,OAAOC,MAAM,WACpCR,EAAiB5B,EAAI4B,eACrBC,EAAiB7B,EAAIqC,OAAOC,gBAGhB,C,EAAMtC,EAAIuC,aAAa,CACrCC,WAAYZ,EAAiB,IAAM,EAAIA,EAAiB,IACxDa,MAAO,O,OAcX,OAhBMX,EAAYY,EAAAC,QAKZZ,EAAkBD,EAAUc,QAC7BC,Y,IAGGA,IACAA,QADAA,OAAa,QAAbA,IAASC,YAATD,OAAeE,QAAfF,IAAeE,+BAAfF,IAA6BG,eAAgB5C,YAAUmB,iBACI,YAA9C,QAAbsB,IAASC,YAATD,OAAeE,QAAfF,IAAeE,2BAAcE,QAA7BJ,IAA6BI,sBAAY,QAAzCJ,IAAuC,UAAE,IAAAK,OAAzCL,IAA2CM,cACvB,eAApBN,EAASO,SACTnB,SAAIY,EAASQ,iBAAiBC,IAAIzB,GAAgB0B,GAAG5B,E,KAIzC6B,OAAS,EAEzB,C,EAAO,CAAEC,aADHzB,EAAeD,EAAgB2B,OACFC,GAAIC,cAAe5B,IAGrD,C,EAAO,CAAEyB,aAAa,EAAIG,cAAe,O,GAClD,GA/BA,E,IAiCAC,yB,MAAAA,SAAmBC,G,IAKXC,EAJAD,EAAEE,OAAOhE,MAAQgB,KAAKf,MAAMC,SAASvB,OACrCqC,KAAKC,SAAS,CACV7B,UAAW,IAAIgB,eAAUY,KAAKvB,mBAAmBqE,EAAEE,OAAOhE,QAE1C,QAApB+D,EAAA/C,KAAKiD,uBAAL,IAAAF,KAAAG,KAAAlD,KAAuB,CAAErC,KAAMmF,EAAEE,OAAOhE,MAEhD,G,CAEAmE,sB,MAAAA,WACI,IAAMC,EAAgBpD,KAAKqD,QAAnBD,UACmDE,EAAAtD,KAAKf,MAAxDI,EAAmDiE,EAAnDjE,QAASL,EAA0CsE,EAA1CtE,IAAKM,EAAqCgE,EAArChE,SAAUC,EAA2B+D,EAA3B/D,aAAcL,EAAaoE,EAAbpE,SACfqE,eAAOvD,KAAKzC,OAAQ,QAA3CY,EAAuBoF,EAAvBpF,YAAaF,EAAUsF,EAAVtF,MAErB,GACiB,KAAb+B,KAAKnB,MAEU,KAAfG,iBAAKwE,OAEL,OAAO,KAGX,IAAMC,EAAmBzD,KAAKvB,mBAAmBS,EAASvB,MAEpD+F,GAAOzC,SAAIjB,KAAKnB,KAAK8E,KAAKC,KAAGC,aAC7BC,EAAmCC,SAASC,cAAc,oBAK1DC,EAAajF,EAAIkF,oBAAoBd,EAAY,cAAe,gBAKhEe,EAAanF,EAAIkF,oBAAoBd,EAAY,cAAe,gBAEhE5F,EAAO,CACTqE,SAAU,CACNuC,YAAc,6CAA6DC,OAAjBZ,GAC1D3B,KAAM,CACFC,aAAc,CACVC,YAAa5C,YAAUmB,gBAEvB0B,QAAS,CACL,CACIE,YAAa,SACb3E,KAAM8G,SAAOC,OACTC,KAAKC,UAAU,CACXC,oBAAqB,CACjBC,eAAgB,CAAC3F,EAAIlB,SACrB8G,gBAAiBC,OAAOC,WAAWC,wBACnCC,SAAUhG,EAAIqC,OAAO4D,eAGzBC,WAAY,kDAIpBC,QAASzB,EAAK0B,UACdC,KAAKC,WAAM,aAQnC,GACInH,EAAYoH,UACXtH,EAAMsH,UACNlG,GAEDW,KAAKJ,WAAakE,EAAe0B,MACnC,CACE,IAAiB,IAAblG,EAGA,OAAI2E,GAII,EAAAwB,EAAAC,MAAAD,EAAAE,SAAA,C,WACI,EAAAF,EAAAC,MAAC,OAAIE,UAAU,Q,UAET,iDAEF,EAAAH,EAAAI,KAAC,KACGC,KAAM9G,EAAI+G,UAAUC,YAAUC,UAC9BC,OAAO,SACPC,IAAI,sB,SAEHnH,EAAIlB,UAGP,6BAGN,EAAA2H,EAAAI,KAAC,UACGD,UAAU,mBACVQ,QAAS,WACLpH,EAAIqH,YAAY7I,GAAMkC,MAAM4G,Y,OAAOC,oBAAe,CAACD,G,GACvD,E,SAAA,gBAUR,EAAAb,EAAAI,KAAC,OAAID,UAAU,Q,SAET,wGAIX,IAAiB,IAAbtG,EAGP,OAAK6E,GAgBM5E,iBAAciH,MAAMpD,KAIvB,EAAAqC,EAAAC,MAAC,OAAIE,UAAU,Q,UACT,2HACF,EAAAH,EAAAI,KAAC,UACD,EAAAJ,EAAAI,KAAC,KACGK,OAAO,SACPJ,KAAM9G,EAAIyH,eAAeT,YAAUC,SAAU3G,GAC7C6G,IAAI,sB,SAHpC,0BAawB,EAAAV,EAAAC,MAAAD,EAAAE,SAAA,C,WACI,EAAAF,EAAAC,MAAC,OAAIE,UAAU,Q,UAET,6BAAqCvB,OAAT/E,EAAS,oDAEvC,EAAAmG,EAAAI,KAAC,KACGC,KAAM9G,EAAIyH,eAAeT,YAAUC,SAAU3G,GAC7C4G,OAAO,SACPC,IAAI,sB,SAHxC,yBAS4B,EAAAV,EAAAI,KAAC,UACGD,UAAU,mCACVQ,QAAS,WACLpH,EAAI0H,YAAYpH,EAAU,eAAeI,MAAM4G,Y,OAAOC,oBAAe,CAACD,G,GAC1E,E,SAEE,iBApDV,EAAAb,EAAAC,MAAC,OAAIE,UAAU,Q,UACT,2CAAmDvB,OAAT/E,EAAS,uDACrD,EAAAmG,EAAAI,KAAC,UACD,EAAAJ,EAAAI,KAAC,KACGK,OAAO,SACPJ,KAAM9G,EAAIyH,eAAeT,YAAUC,SAAU3G,GAC7C6G,IAAI,sB,SAHpC,wBAuDQ,CACJ,G,CAEAQ,a,MAAAA,SAAO7I,G,IAAiB8I,6DACpB,OACI,EAAAnB,EAAAC,MAAC,Q,WACG,EAAAD,EAAAI,KAAC,KACGC,KAAMtI,OAAKK,SAASC,UAAU+I,UAAUrG,KAAK1C,GAC7CoI,OAAO,SACPC,IAAI,sB,SAEHrI,IAEJ8I,GAAa,EAAAnB,EAAAI,KAACiB,EAAA3G,QAAA,IAAmB,OAG9C,G,CAEA4G,U,MAAAA,SAAIA,GACA,OACI,EAAAtB,EAAAC,MAAC,OAAIE,UAAU,gB,WACX,EAAAH,EAAAI,KAACmB,EAAA7G,QAAA,KACD,EAAAsF,EAAAI,KAACiB,EAAA3G,QAAA,IACA4G,EAAIE,WAAY,EAAAxB,EAAAI,KAACqB,EAAA/G,QAAA,KAAmB,EAAAsF,EAAAI,KAACsB,EAAAhH,QAAA,KACtC,EAAAsF,EAAAI,KAAC,O,SAAKrB,KAAKC,UAAUsC,EAAK,KAAM,UAG5C,G,CAEAnI,kB,MAAAA,W,WACQoB,KAAKJ,WAAaI,KAAKf,MAAMC,SAASvB,OAC1CqC,KAAKJ,SAAWI,KAAKf,MAAMC,SAASvB,KACpCqC,KAAKzC,OAAOiC,MAAMQ,KAAKf,MAAMC,UAAUQ,MAAK,WACxC,IAAMzB,GAAYsF,YAAO/E,EAAKjB,OAAQ,QAA9BU,MACHO,EAAKjB,OAAOgI,QAGLtH,EAAMsH,QAKd/G,EAAKyB,SAAS,CACVX,UAAU,EACVC,aAAc,KACdP,IAAK,IAAIG,gBAAWX,EAAKS,MAAMC,SAASvB,QAN5Ca,EAAK4I,6BAHL5I,EAAK6I,qBAYb,IACJ,G,CAEAD,iC,MAAAA,W,WACUzJ,EAAWqC,KAAKf,MAAMC,SAApBvB,KAEF8F,EAAmBzD,KAAKvB,mBAAmBd,GAEjDqC,KAAKC,SAAS,CAAEZ,SAAS,IAGzBF,aAAWmI,KAAK3J,GACX4J,OAAOzE,Y,OAAM,IAAI3D,gBAAWxB,E,IAC5B+B,MAAM8H,Y,IAiBuBC,EACKA,EAhB1BD,EAAOhE,MAQRhF,EAAKiC,sBAAsB+G,GACtBD,OAAOzE,YAAO,IACdpD,MAAM+H,YACH,OAAAjJ,EAAKyB,SAAS,CACVjB,IAAKwI,EACLpJ,UAAW,IAAIgB,eAAUqE,GACzBpE,SAAS,EACTC,SAAmC,QAAzBmI,mBAAchF,mBAAdgF,SAA6B,EACvClI,aAA0C,QAA3BkI,mBAAc7E,qBAAd6E,QAAkD,M,IAf7EjJ,EAAKyB,SAAS,CACVjB,IAAKwI,EACLpJ,UAAW,IAAIgB,eAAUqE,GACzBpE,SAAS,GAgBrB,GACR,G,CAEAgI,0B,MAAAA,W,WACY1J,EAAqBqC,KAAKf,MAAMC,SAAhCvB,KAEF8F,EAAmBzD,KAAKvB,mBAAmBiJ,GAEjD1H,KAAKC,SAAS,CAAEZ,SAAS,IAEzBsI,QAAQC,IAAI,CACRzI,aAAWmI,KAAKI,GAAYH,OAAOzE,Y,OAAM,IAAI3D,gBAAWuI,E,IACxDtI,YAAUkI,KAAK7D,GAAkB8D,OAAOzE,Y,OAAM,IAAI1D,eAAUqE,E,MAC7D/D,MAAK,SAAAmI,G,IAgBsBJ,EACKA,E,qBAjBzBD,OAAQM,OAETN,EAAOhE,OAAUsE,EAAatE,MAO/BhF,EAAKiC,sBAAsB+G,GACtBD,OAAOzE,YAAO,IACdpD,MAAM+H,YACH,OAAAjJ,EAAKyB,SAAS,CACVjB,IAAKwI,EACLpJ,UAAW0J,EACXzI,SAAS,EACTC,SAAmC,QAAzBmI,mBAAchF,mBAAdgF,SAA6B,EACvClI,aAA0C,QAA3BkI,mBAAc7E,qBAAd6E,QAAkD,M,IAd7EjJ,EAAKyB,SAAS,CACVjB,IAAKwI,EACLpJ,UAAW0J,EACXzI,SAAS,GAerB,GACJ,G,CAEA0I,iB,MAAAA,WACI,IAAQC,EAA6BhI,KAAKqD,QAAlC2E,SAC4B1E,EAAAtD,KAAKf,MAAjCD,EAA4BsE,EAA5BtE,IAAKK,EAAuBiE,EAAvBjE,QAASjB,EAAckF,EAAdlF,UAItB,IAAK6J,EAAeC,aAChB,OAAO,EAAAzC,EAAAI,KAAC,OAAID,UAAU,wB,SAAwB,+BAIlD,IAAMuC,EAAoB,CAAC,YAAa,QAAS,eAC3CC,EAAgBC,OAAOC,SAAQ/E,YAAOvD,KAAKzC,OAAQ,SACpDqE,QAAO,SAAAiG,G,yBAAEU,O,OAAGC,KAASjD,SAAW4C,EAAkBM,SAASF,E,IAC3DG,KAAI,SAAAb,G,yBAAEU,OAAGC,O,OACN,EAAA/C,EAAAC,MAAC,KAEGE,UAAW,M,WAEX,EAAAH,EAAAC,MAAC,Q,UAAM8C,EAAEjD,QAAU,IAAW,IAAS,OACtCiD,EAAEG,YAJG,KAAMtE,OAAFkE,G,IAQtB,OAAIH,EAAc5F,OAAS,GAEnB,EAAAiD,EAAAI,KAAAJ,EAAAE,SAAA,C,UACI,EAAAF,EAAAC,MAAC,OAAIE,UAAU,wB,WACX,EAAAH,EAAAI,KAAC,O,SAAKuC,IACLpI,KAAKmD,uBAKlB9D,GAAgB,EAAAoG,EAAAI,KAAC,OAAID,UAAU,2BAK9BxH,EAAUwK,QAAWxK,EAAUyK,iBAAoBzK,EAAU0K,SAM9D,EAAArD,EAAAI,KAACkD,EAAAC,KAAA,CACGC,QAAS,CACLC,KAAM,eACNC,aAAc,4BACdC,aAAc,6BAElBC,MAAO,CACHC,iBAAeC,UAAU,CAAE3D,UAAY,GAAWvB,OAATlH,EAAS,YAAWqM,SAAU,CAAExK,MAAKZ,eAC9EqL,cAAYF,UAAU,CAAE3D,UAAY,GAAWvB,OAATlH,EAAS,YAAWqM,SAAU,CAAExK,MAAKZ,eAC3EsL,aAAWH,UAAU,CAAE3D,UAAY,GAAWvB,OAATlH,EAAS,YAAWwM,kBAAmBvL,QAdpFwL,QAAQC,MAAM,6BAA8BzL,IACrC,EAAAqH,EAAAI,KAAC,OAAID,UAAU,wB,SAAwB,mDAiBtD,G,CAEAkE,wB,MAAAA,W,WACIjF,OAAOkF,QAAQC,WAAW,OAC1BjG,SAASkG,iBAAiB,sBAAuBC,Y,OAAU1L,EAAKqE,mBAAmBqH,E,GACvF,G,CAEAC,a,MAAAA,W,IAM+CrL,E,OAL3C,OACI,EAAA2G,EAAAC,MAAC,OAAIE,UAAU,U,WACX,EAAAH,EAAAI,KAAC,OAAID,UAAU,iB,UACX,EAAAH,EAAAI,KAAC,OAAID,UAAU,Y,UACX,EAAAH,EAAAI,KAACuE,EAAAC,OAAA,CACGC,cAAe,CAAE3M,KAA2B,QAArBmB,YAAQC,UAAUC,WAAlBF,QAAyB,IAChDyL,SAAWC,YACPhM,EAAKqB,YAAY,CAAElC,KAAM6M,EAAO7M,OAChCa,EAAKE,sBACT,EACA+L,SAAU,WAAO,E,SAEhB,SAAA5C,G,IAAG6C,cAGA,OAFAlM,EAAKyE,gBAAkByH,GAGnB,EAAAjF,EAAAI,KAACuE,EAAAO,KAAA,C,UACG,EAAAlF,EAAAI,KAAC+E,EAAAC,UAAA,CACGC,KAAK,OACLC,YAAY,kBACZC,aAAa,EACbC,QAAQ,WACRC,WAAS,KAIzB,QAKXlL,KAAK+H,eAGlB,KA3gBSjL,C,CAvCb,CAuC6BO,cACzB,EAAA8N,EAAAhL,SADSrD,EACFsO,cAAcpO,E,oFCxCzB,IAAAqO,EAAAxO,EAAA,S,aAEAyO,GAAe,EAAAD,EAAAlL,UAA4B,EAAAsF,EAAAI,KAAK,OAAQ,CACtD0F,EAAG,oCACD,gB,oFCJJ,IAAAF,EAAAxO,EAAA,S,aAEA2O,GAAe,EAAAH,EAAAlL,UAA4B,EAAAsF,EAAAI,KAAK,OAAQ,CACtD0F,EAAG,qDACD,oB,2FCJJ,IAAArL,EAAArD,EAAA,S,iEAWM4O,EAAmB,SAAAC,G,IAAG9F,cAAW4D,aAAalM,mBAAxBsI,YAAW4D,a,OACnC,EAAA/D,EAAAI,KAAC,SAAA8F,EAAAxL,UAAA,EAAAD,EAAAC,SAAA,CACGyF,WAAWgG,aAJK,iBAIiBhG,IAC7BtI,I,UAEJ,EAAAmI,EAAAI,KAACgG,EAAAC,eAAeC,GAAE,CAAOvC,eACxB,EAGIF,EAAiB,CAC1BC,UAAW,SAACjM,G,MAAkC,CAC1C0O,SAAS,EAAAvG,EAAAI,KAACoG,GAAA,EAAA/L,EAAAC,SAAA,GAAqB7C,IAC/BwN,KAAM,W,0FCvBd,IAAA5K,EAAArD,EAAA,S,iEAWMqP,EAAgB,SAAAR,G,IAAG9F,cAAW4D,aAAalM,mBAAxBsI,YAAW4D,a,OAChC,EAAA/D,EAAAI,KAAC,SAAA8F,EAAAxL,UAAA,EAAAD,EAAAC,SAAA,CACGyF,WAAWgG,aAJE,cAIiBhG,IAC1BtI,I,UAEJ,EAAAmI,EAAAI,KAACgG,EAAAM,cAAcJ,GAAE,CAAOvC,eACvB,EAGIC,EAAc,CACvBF,UAAW,SAACjM,G,MAA+B,CACvC0O,SAAS,EAAAvG,EAAAI,KAACuG,GAAA,EAAAlM,EAAAC,SAAA,GAAkB7C,IAC5B+O,MAAM,EACNvB,KAAM,Q,yFCxBd,IAAA5K,EAAArD,EAAA,S,iEAWMyP,EAAe,SAAAZ,G,IAAG9F,cAAW+D,sBAAsBrM,mBAAjCsI,YAAW+D,sB,OAC/B,EAAAlE,EAAAI,KAAC,SAAA8F,EAAAxL,UAAA,EAAAD,EAAAC,SAAA,CACGyF,WAAWgG,aAJC,aAIiBhG,IACzBtI,I,UAEJ,EAAAmI,EAAAI,KAAC0G,EAAAC,IAAIC,aAAY,CAAO9C,wBACvB,EAGID,EAAa,CACtBH,UAAW,SAACjM,G,MAA8B,CACtC0O,SAAS,EAAAvG,EAAAI,KAAC6G,GAAA,EAAAxM,EAAAC,SAAA,GAAiB7C,IAC3B+O,MAAM,EACNvB,KAAM,O","sources":["src/pages/dao/index.ts","src/pages/dao/dao.tsx","node_modules/@mui/icons-material/esm/PauseOutlined.js","node_modules/@mui/icons-material/esm/PlayArrowOutlined.js","src/pages/dao/settings/settings.tsx","src/pages/dao/funds/funds.tsx","src/pages/dao/jobs/jobs.tsx"],"sourcesContent":["import { DaoPage } from \"./dao\";\nexport default DaoPage;\n","import { DeleteOutline, EditOutlined, PauseOutlined, PlayArrowOutlined } from \"@mui/icons-material\";\nimport { Base64 } from \"js-base64\";\nimport debounce from \"lodash.debounce\";\nimport { Component, ContextType } from \"react\";\n\nimport { MI, Wallet } from \"../../entities\";\nimport { Form, Formik } from \"formik\";\nimport { args } from \"../../shared/lib/args/args\";\nimport { fields } from \"../../shared/lib/args/args-types/args-object\";\nimport { Multicall } from \"../../shared/lib/contracts/multicall\";\nimport type { ProposalOutput } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { SputnikDAO, SputnikUI } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { Big, toGas, toYocto } from \"../../shared/lib/converter\";\nimport { STORAGE } from \"../../shared/lib/persistent\";\nimport { signAndSendTxs } from \"../../shared/lib/wallet\";\nimport { Tabs } from \"../../shared/ui/design\";\n\nimport { TextField } from \"../../shared/ui/form\";\nimport { DaoSettingsTab } from \"./settings/settings\";\nimport \"./dao.scss\";\nimport { DaoFundsTab } from \"./funds/funds\";\nimport { DaoJobsTab } from \"./jobs/jobs\";\n\nconst Ctx = Wallet.trySelectorContext();\n\ninterface Props {}\n\ninterface State {\n    formData: {\n        addr: string;\n    };\n    dao: SputnikDAO;\n    multicall: Multicall;\n    loading: boolean;\n    proposed: number;\n    proposedInfo: ProposalOutput | null;\n}\n\nconst _DaoPage = \"DaoPage\";\nexport class DaoPage extends Component<Props, State> {\n    static contextType = Ctx;\n    declare context: ContextType<typeof Ctx>;\n\n    schema = args\n        .object()\n        .shape({\n            addr: args\n                .object()\n                .shape({\n                    noAddress: args.string().address().retain({ initial: true }),\n                    noDao: args.string().sputnikDao().retain({ initial: true }),\n                    noMulticall: args.string().multicall().retain({\n                        customMessage: \"DAO does not have a multicall instance\",\n                        initial: true,\n                    }),\n                })\n                .transform((_, addr) => ({\n                    noAddress: addr,\n                    noDao: addr,\n                    noMulticall: this.toMulticallAddress(addr),\n                }))\n                .retain(),\n        })\n        .retain();\n\n    tryLoadInfoDebounced = debounce(() => this.tryLoadInfo(), 400);\n\n    lastAddr: string | null;\n    fee: string = \"\";\n    formikSetValues?: (fields: State[\"formData\"], shouldValidate?: boolean) => void;\n\n    constructor(props: Props) {\n        super(props);\n\n        const addr = STORAGE.addresses.dao;\n\n        this.state = {\n            formData: {\n                addr,\n            },\n\n            dao: new SputnikDAO(addr),\n            multicall: new Multicall(this.toMulticallAddress(addr)),\n\n            loading: false,\n            proposed: -1,\n            proposedInfo: null,\n        };\n\n        this.schema.check(this.state.formData);\n\n        Multicall.getFactoryFee().then((multicallFactoryFee) => {\n            this.fee = multicallFactoryFee;\n            this.tryLoadInfo();\n        });\n\n        this.lastAddr = null;\n    }\n\n    setFormData(newFormData: State[\"formData\"], callback?: () => void | undefined) {\n        this.setState(\n            {\n                formData: {\n                    ...this.state.formData,\n                    ...newFormData,\n                },\n            },\n            callback\n        );\n    }\n\n    toMulticallAddress(addr: string): string {\n        return args\n            .string()\n            .ensure()\n            .intoBaseAddress()\n            .append(\".\" + Multicall.FACTORY_ADDRESS)\n            .cast(addr);\n    }\n\n    /**\n     * check if DAO has a proposal to create multicall instance.\n     * proposal must be in progress, and not expired.\n     *\n     * @returns {object} ID and info of proposal to create multicall instance,\n     */\n    async proposalAlreadyExists(\n        dao: SputnikDAO\n    ): Promise<{ proposal_id: number; proposal_info: ProposalOutput | null }> {\n        // Date.now() returns timestamp in milliseconds, SputnikDAO uses nanoseconds\n        const currentTime = Big(Date.now()).times(\"1000000\");\n        const lastProposalId = dao.lastProposalId;\n        const proposalPeriod = dao.policy.proposal_period;\n\n        // get last 100 DAO proposals\n        const proposals = await dao.getProposals({\n            from_index: lastProposalId < 100 ? 0 : lastProposalId - 100,\n            limit: 100,\n        });\n        // Look for active \"Create multicall\" proposals\n        const activeProposals = proposals.filter(\n            (proposal) =>\n                // discard if not active proposal to create multicall instance\n\n                proposal.kind?.FunctionCall?.receiver_id === Multicall.FACTORY_ADDRESS &&\n                proposal.kind?.FunctionCall?.actions?.[0]?.method_name === \"create\" &&\n                proposal.status === \"InProgress\" &&\n                Big(proposal.submission_time).add(proposalPeriod).gt(currentTime)\n        );\n\n        // If there many \"Create multicall\" proposals, return latest.\n        if (activeProposals.length > 0) {\n            const lastProposal = activeProposals.pop()!;\n            return { proposal_id: lastProposal.id, proposal_info: lastProposal };\n        }\n        // No \"Create multicall\" proposals found.\n        else return { proposal_id: -1, proposal_info: null };\n    }\n\n    onAddressesUpdated(e: CustomEvent<{ dao: string }>) {\n        if (e.detail.dao !== this.state.formData.addr) {\n            this.setState({\n                multicall: new Multicall(this.toMulticallAddress(e.detail.dao)),\n            });\n            this.formikSetValues?.({ addr: e.detail.dao });\n        }\n    }\n\n    createMulticall() {\n        const { accountId } = this.context!;\n        const { loading, dao, proposed, proposedInfo, formData } = this.state;\n        const { noMulticall, noDao } = fields(this.schema, \"addr\");\n\n        if (\n            this.fee === \"\" ||\n            // wallet not logged in or DAO object not initialized yet\n            dao?.ready !== true\n        ) {\n            return null;\n        }\n\n        const multicallAddress = this.toMulticallAddress(formData.addr);\n\n        const depo = Big(this.fee).plus(MI.MIN_BALANCE);\n        const daoSearchInput: HTMLInputElement = document.querySelector(\".DaoSearch input\")!;\n\n        /**\n         * Can user propose a FunctionCall to DAO?\n         */\n        const canPropose = dao.checkUserPermission(accountId!, \"AddProposal\", \"FunctionCall\");\n\n        /**\n         * Can user vote approve a FunctionCall on the DAO?\n         */\n        const canApprove = dao.checkUserPermission(accountId!, \"VoteApprove\", \"FunctionCall\");\n\n        const args = {\n            proposal: {\n                description: `create multicall instance for this DAO at ${multicallAddress}`,\n                kind: {\n                    FunctionCall: {\n                        receiver_id: Multicall.FACTORY_ADDRESS,\n\n                        actions: [\n                            {\n                                method_name: \"create\",\n                                args: Base64.encode(\n                                    JSON.stringify({\n                                        multicall_init_args: {\n                                            admin_accounts: [dao.address],\n                                            croncat_manager: window.nearConfig.CRONCAT_MANAGER_ADDRESS,\n                                            job_bond: dao.policy.proposal_bond,\n                                        },\n\n                                        public_key: \"HdJuXFRBKMEXuzEsXVscdd3aoBvEGGXDKQ3JoNhqJ4uU\",\n                                    })\n                                ),\n\n                                deposit: depo.toFixed(),\n                                gas: toGas(\"150\"),\n                            },\n                        ],\n                    },\n                },\n            },\n        };\n\n        if (\n            noMulticall.isBad() &&\n            !noDao.isBad() && // base.sputnik-dao.near does not exist\n            !loading &&\n            // disappear while debouncing\n            this.lastAddr === daoSearchInput.value\n        ) {\n            if (proposed === -1) {\n                // no create multicall proposal exists\n\n                if (canPropose) {\n                    // ... and user can propose FunctionCall\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`A multicall instance can only be created for `}\n\n                                <a\n                                    href={dao.getDaoUrl(SputnikUI.ASTRO_UI)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {dao.address}\n                                </a>\n\n                                {` by making a proposal.`}\n                            </div>\n\n                            <button\n                                className=\"create-multicall\"\n                                onClick={() => {\n                                    dao.addProposal(args).then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                Propose\n                            </button>\n                        </>\n                    );\n                } else {\n                    // ... and user cannot propose FunctionCall\n\n                    return (\n                        <div className=\"Alert\">\n                            {/* hint: you can use \"ref-community-board-testnet\" as DAO to get to this message */}\n                            {`This DAO has no multicall instance. A DAO member with proposing permissions should make a proposal.`}\n                        </div>\n                    );\n                }\n            } else if (proposed !== -1) {\n                // create multicall proposal exists\n\n                if (!canApprove) {\n                    // user does not have rights to VoteApprove\n\n                    return (\n                        <div className=\"Alert\">\n                            {`Proposal to create a multicall exists (#${proposed}), but you have no voting permissions on this DAO.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else if (proposedInfo?.votes[accountId!]) {\n                    // user can VoteApprove and already voted\n\n                    return (\n                        <div className=\"Alert\">\n                            {`You have voted on creating a multicall instance for this DAO. It will be created as soon as the proposal passes voting.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else {\n                    // user can VoteApprove and did NOT vote yet.\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`There exists a proposal (#${proposed}) to create a multicall instance for this DAO. `}\n\n                                <a\n                                    href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Open on AstroDAO\n                                </a>\n                            </div>\n\n                            <button\n                                className=\"create-multicall proposal-exists\"\n                                onClick={() => {\n                                    dao.actProposal(proposed, \"VoteApprove\").then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                {`vote YES`}\n                            </button>\n                        </>\n                    );\n                }\n            }\n        }\n    }\n\n    toLink(address: string, deleteIcon = true) {\n        return (\n            <span>\n                <a\n                    href={args.string().address().intoUrl().cast(address)}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {address}\n                </a>\n                {deleteIcon ? <DeleteOutline /> : null}\n            </span>\n        );\n    }\n\n    job(job: any) {\n        return (\n            <div className=\"JobsList-item\">\n                <EditOutlined />\n                <DeleteOutline />\n                {job.is_active ? <PauseOutlined /> : <PlayArrowOutlined />}\n                <pre>{JSON.stringify(job, null, \"  \")}</pre>\n            </div>\n        );\n    }\n\n    tryLoadInfo() {\n        if (this.lastAddr === this.state.formData.addr) return;\n        this.lastAddr = this.state.formData.addr;\n        this.schema.check(this.state.formData).then(() => {\n            const { noDao } = fields(this.schema, \"addr\");\n            if (!this.schema.isBad()) {\n                // case 0: DAO and Multicall exist\n                this.confidentlyLoadInfo();\n            } else if (!noDao.isBad()) {\n                // case 1: Only DAO exists\n                this.confidentlyLoadOnlyDaoInfo();\n            } else {\n                // case 2: neither exist\n                this.setState({\n                    proposed: -1,\n                    proposedInfo: null,\n                    dao: new SputnikDAO(this.state.formData.addr), // will be invalid\n                });\n            }\n        });\n    }\n\n    confidentlyLoadOnlyDaoInfo() {\n        const { addr } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(addr);\n\n        this.setState({ loading: true });\n\n        // initialize DAO object\n        SputnikDAO.init(addr)\n            .catch((e) => new SputnikDAO(addr))\n            .then((newDao) => {\n                // some error happened during DAO object init.\n                if (!newDao.ready) {\n                    this.setState({\n                        dao: newDao,\n                        multicall: new Multicall(multicallAddress),\n                        loading: false,\n                    });\n                    return;\n                } else {\n                    this.proposalAlreadyExists(newDao)\n                        .catch((e) => {})\n                        .then((proposalData) =>\n                            this.setState({\n                                dao: newDao,\n                                multicall: new Multicall(multicallAddress),\n                                loading: false,\n                                proposed: proposalData?.proposal_id ?? -1,\n                                proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                            })\n                        );\n                }\n            });\n    }\n\n    confidentlyLoadInfo() {\n        const { addr: daoAddress } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(daoAddress);\n\n        this.setState({ loading: true });\n\n        Promise.all([\n            SputnikDAO.init(daoAddress).catch((e) => new SputnikDAO(daoAddress)),\n            Multicall.init(multicallAddress).catch((e) => new Multicall(multicallAddress)),\n        ]).then(([newDao, newMulticall]) => {\n            // some error happened during DAO object init.\n            if (!newDao.ready || !newMulticall.ready) {\n                this.setState({\n                    dao: newDao,\n                    multicall: newMulticall,\n                    loading: false,\n                });\n            } else {\n                this.proposalAlreadyExists(newDao)\n                    .catch((e) => {})\n                    .then((proposalData) =>\n                        this.setState({\n                            dao: newDao,\n                            multicall: newMulticall,\n                            loading: false,\n                            proposed: proposalData?.proposal_id ?? -1,\n                            proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                        })\n                    );\n            }\n        });\n    }\n\n    getContent() {\n        const { selector: walletSelector } = this.context!;\n        const { dao, loading, multicall } = this.state;\n\n        // if user not logged in, remind them to sign in.\n        // TODO: only require signIn when DAO has no multicall instance (to know if user can propose or vote on existing proposal to create multicall)\n        if (!walletSelector.isSignedIn()) {\n            return <div className=\"DaoPage-content error\">Please sign in to continue</div>;\n        }\n\n        // errors to display\n        const displayErrorsList = [\"noAddress\", \"noDao\", \"noMulticall\"];\n        const displayErrors = Object.entries(fields(this.schema, \"addr\"))\n            .filter(([k, v]) => v.isBad() && displayErrorsList.includes(k))\n            .map(([k, v]) => (\n                <p\n                    key={`p-${k}`}\n                    className={\"red\"}\n                >\n                    <span>{v.isBad() ? \"\\u2717\" : \"\\u2714\"} </span>\n                    {v.message()}\n                </p>\n            ));\n\n        if (displayErrors.length > 0)\n            return (\n                <>\n                    <div className=\"DaoPage-content error\">\n                        <div>{displayErrors}</div>\n                        {this.createMulticall()}\n                    </div>\n                </>\n            );\n\n        if (loading) return <div className=\"DaoPage-content loader\" />;\n\n        /*\n         * Everything should be loaded\n         */\n        if (!multicall.admins || !multicall.tokensWhitelist || !multicall.jobBond) {\n            console.error(\"multicall infos incomplete\", multicall);\n            return <div className=\"DaoPage-content error\">Unexpected error! Multicall might be outdated.</div>;\n        }\n\n        return (\n            <Tabs\n                classes={{\n                    root: \"DaoPage-tabs\",\n                    buttonsPanel: \"DaoPage-tabs-buttonsPanel\",\n                    contentSpace: \"DaoPage-tabs-contentSpace\",\n                }}\n                items={[\n                    DaoSettingsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoFundsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoJobsTab.uiConnect({ className: `${_DaoPage}-content`, multicallInstance: multicall }),\n                ]}\n            />\n        );\n    }\n\n    componentDidMount(): void {\n        window.SIDEBAR.switchPage(\"dao\");\n        document.addEventListener(\"onaddressesupdated\", (event) => this.onAddressesUpdated(event as CustomEvent));\n    }\n\n    render() {\n        return (\n            <div className=\"DaoPage\">\n                <div className=\"DaoPage-header\">\n                    <div className=\"DaoSearch\">\n                        <Formik\n                            initialValues={{ addr: STORAGE.addresses.dao ?? \"\" }}\n                            validate={(values) => {\n                                this.setFormData({ addr: values.addr });\n                                this.tryLoadInfoDebounced();\n                            }}\n                            onSubmit={() => {}}\n                        >\n                            {({ setValues }) => {\n                                this.formikSetValues = setValues;\n\n                                return (\n                                    <Form>\n                                        <TextField\n                                            name=\"addr\"\n                                            placeholder=\"Search for DAOs\"\n                                            hiddenLabel={true}\n                                            variant=\"standard\"\n                                            autoFocus\n                                        />\n                                    </Form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n\n                {this.getContent()}\n            </div>\n        );\n    }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'PauseOutlined');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 8.64 15.27 12 10 15.36V8.64M8 5v14l11-7L8 5z\"\n}), 'PlayArrowOutlined');","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { SettingsEditor, SettingsEditorModule } from \"../../../widgets\";\n\nimport \"./settings.scss\";\n\ninterface DaoSettingsTabUIProps extends HTMLProps<HTMLDivElement>, SettingsEditorModule.Inputs {}\n\nconst _DaoSettingsTab = \"DaoSettingsTab\";\n\nconst DaoSettingsTabUI = ({ className, adapters, ...props }: DaoSettingsTabUIProps) => (\n    <div\n        className={clsx(_DaoSettingsTab, className)}\n        {...props}\n    >\n        <SettingsEditor.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoSettingsTab = {\n    uiConnect: (props: DaoSettingsTabUIProps) => ({\n        content: <DaoSettingsTabUI {...props} />,\n        name: \"Settings\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { TokenBalances, type TokenBalancesModule } from \"../../../widgets\";\n\nimport \"./funds.scss\";\n\ninterface DaoFundsTabUIProps extends HTMLProps<HTMLDivElement>, TokenBalancesModule.Inputs {}\n\nconst _DaoFundsTab = \"DaoFundsTab\";\n\nconst DaoFundsTabUI = ({ className, adapters, ...props }: DaoFundsTabUIProps) => (\n    <div\n        className={clsx(_DaoFundsTab, className)}\n        {...props}\n    >\n        <TokenBalances.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoFundsTab = {\n    uiConnect: (props: DaoFundsTabUIProps) => ({\n        content: <DaoFundsTabUI {...props} />,\n        lazy: true,\n        name: \"Funds\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { ComponentProps, HTMLProps } from \"react\";\n\nimport { Job } from \"../../../entities\";\n\nimport \"./jobs.scss\";\n\ninterface DaoJobsTabUIProps extends HTMLProps<HTMLDivElement>, ComponentProps<typeof Job.EntriesTable> {}\n\nconst _DaoJobsTab = \"DaoJobsTab\";\n\nconst DaoJobsTabUI = ({ className, multicallInstance, ...props }: DaoJobsTabUIProps) => (\n    <div\n        className={clsx(_DaoJobsTab, className)}\n        {...props}\n    >\n        <Job.EntriesTable {...{ multicallInstance }} />\n    </div>\n);\n\nexport const DaoJobsTab = {\n    uiConnect: (props: DaoJobsTabUIProps) => ({\n        content: <DaoJobsTabUI {...props} />,\n        lazy: true,\n        name: \"Jobs\",\n    }),\n};\n"],"names":["$76b7fb5bd4084ff2$export$2e2bcd8739ae039","parcelRequire","DaoPage","$4jyMX","Ctx","Wallet","trySelectorContext","_DaoPage","$431ec27c8b907096$export$a71eafe0644784a3","Component","props","schema","args","object","shape","addr","noAddress","string","address","retain","initial","noDao","sputnikDao","noMulticall","multicall","customMessage","transform","_","_this","toMulticallAddress","tryLoadInfoDebounced","debounce","tryLoadInfo","fee","STORAGE","addresses","dao","state","formData","SputnikDAO","Multicall","loading","proposed","proposedInfo","check","getFactoryFee","then","multicallFactoryFee","lastAddr","setFormData","newFormData","callback","this","setState","$jzfTN","default","ensure","intoBaseAddress","append","FACTORY_ADDRESS","cast","proposalAlreadyExists","$6oBUX","currentTime","lastProposalId","proposalPeriod","proposals","activeProposals","lastProposal","Big","Date","now","times","policy","proposal_period","getProposals","from_index","limit","_state","sent","filter","proposal","kind","FunctionCall","receiver_id","actions","_proposal_kind_FunctionCall_actions_","method_name","status","submission_time","add","gt","length","proposal_id","pop","id","proposal_info","onAddressesUpdated","e","_this_formikSetValues","detail","formikSetValues","call","createMulticall","accountId","context","_this_state","fields","ready","multicallAddress","depo","plus","MI","MIN_BALANCE","daoSearchInput","document","querySelector","canPropose","checkUserPermission","canApprove","description","concat","Base64","encode","JSON","stringify","multicall_init_args","admin_accounts","croncat_manager","window","nearConfig","CRONCAT_MANAGER_ADDRESS","job_bond","proposal_bond","public_key","deposit","toFixed","gas","toGas","isBad","value","$lBpE3","jsxs","Fragment","className","jsx","href","getDaoUrl","SputnikUI","ASTRO_UI","target","rel","onClick","addProposal","tx","signAndSendTxs","votes","getProposalUrl","actProposal","toLink","deleteIcon","intoUrl","$2K4Gt","job","$kA5ak","is_active","$lkyf4","$5NwFW","confidentlyLoadOnlyDaoInfo","confidentlyLoadInfo","init","catch","newDao","proposalData","daoAddress","Promise","all","param","newMulticall","getContent","selector","walletSelector","isSignedIn","displayErrorsList","displayErrors","Object","entries","k","v","includes","map","message","admins","tokensWhitelist","jobBond","$hStsZ","Tabs","classes","root","buttonsPanel","contentSpace","items","DaoSettingsTab","uiConnect","adapters","DaoFundsTab","DaoJobsTab","multicallInstance","console","error","componentDidMount","SIDEBAR","switchPage","addEventListener","event","render","$b58gW","Formik","initialValues","validate","values","onSubmit","setValues","Form","$jpmSb","TextField","name","placeholder","hiddenLabel","variant","autoFocus","$lJitl","contextType","$1SOLG","$f876070464c231e4$export$2e2bcd8739ae039","d","$438ae002ac2d0d94$export$2e2bcd8739ae039","DaoSettingsTabUI","_param","$hy8Go","clsx","$b3WIu","SettingsEditor","UI","content","$6ff53f3120bcabdd$var$DaoSettingsTabUI","DaoFundsTabUI","TokenBalances","$1a6a2e22793ede1e$var$DaoFundsTabUI","lazy","DaoJobsTabUI","$dgThQ","Job","EntriesTable","$bed995df4c766681$var$DaoJobsTabUI"],"version":3,"file":"dao.28dbb412.js.map"}