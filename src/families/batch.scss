@use 'sass/color';
@use 'sass/size';
@use 'sass/font';
@use 'sass/mixin';

.batch-container {
    position: relative;
    display: flex;
    flex-flow: column nowrap;
    width: 100%;
    padding: 0;
    min-height: size.$task-height;
    border-radius: 1.25 * size.$task-radius;
    background-color: transparent;
    overflow: shown;
    .tasks-wrapper {
        width: calc(100% - 0.5 * size.$gap);
        margin: 0.25 * size.$gap;
        margin-top: 0;
        background-color: transparent;
        box-shadow: 0 0 0 9999px color.$black !important;
        border-radius: size.$task-radius;
        .task-wrapper {
            width: calc(size.$task-width - size.$gap) !important;
            &:first-of-type {
                margin-top: 0.5 * size.$gap;
            }
            &:last-of-type {
                margin-bottom: 0.5 * size.$gap;
            }
        }
    }
    & > .name {
        padding: 0.25 * size.$gap 0.5 * size.$gap;
        font-size: size.$text;
        font-weight: 800;
        color: color.$light-text;
        z-index: 1;
    }
    &.has-errors:not(.is-edited) {
        outline: 4px solid color.$red;
        outline-offset: -2px;
        border-radius: 1.25 * size.$task-radius;
    }
    &.is-edited {
        outline: 4px solid color.$blue;
        outline-offset: -2px;
        border-radius: 1.25 * size.$task-radius;
    }
}

.disguised-batch {
    .data-container {
        hr {
            margin: 0.25 * size.$gap;
            border-color: rgba(color.$black, 0.05);
        }
        .details {
            @include mixin.no-scrollbar;
            padding: 1rem;
            margin: 0.5rem;
            background-color: rgba(color.$lightest, 1);
            border-radius: 0.5 * size.$task-radius;
            font-size: size.$smaller-text;
            overflow-x: scroll;
        }
    }
    .hidden {
        display: none;
    }
}

.edit {
    & > .section {
        @include mixin.full;
        @include mixin.center-items(flex-start);
        flex: 0;
        width: calc(100% - size.$gap);
        max-height: unset !important;
        margin: 0.5 * size.$gap 0;
        padding: 0.5 * size.$gap;
        border-radius: size.$task-radius;
        box-shadow: inset 0px 0px 30px 0px rgba(color.$white, 0.1);
        & > .MuiTextField-root {
            align-self: flex-end;
            width: 100%;
            &:first-of-type > .MuiOutlinedInput-root > fieldset {
                border-radius: size.$task-radius size.$task-radius 0 0;
            }
            &:nth-last-of-type(2) > .MuiOutlinedInput-root > fieldset {
                border-radius: 0 0 size.$task-radius size.$task-radius;
            }
        }
        & > .checkbox {
            align-self: flex-end;
            width: 100%;
        }
        h2 {
            align-self: flex-start;
            color: color.$light-text;
            font-family: font.$code;
            margin-bottom: 0.5 * size.$gap;
        }
    }
    .add-action {
        @include mixin.center-items(stretch);
        gap: 0.5 * size.$gap;
        flex-flow: row wrap;
        & > h2 {
            width: 100%;
            color: color.$light-text;
            font-size: size.$text;
            text-align: center;
            margin-top: size.$gap;
        }
        .MuiTextField-root {
            flex: 1;
            & > .MuiOutlinedInput-root > fieldset {
                border-radius: size.$task-radius;
            }
        }
        & > button {
            flex: 0;
            @include mixin.center-items;
            height: calc(1.8rem + 17px); // mimic mui's text field height
            padding: 0.3em;
            padding-right: 0.6em;
            font-size: size.$text;
            border-radius: size.$task-radius;
            color: color.$green;
            border: 1px solid color.$green;
            background-color: rgba(color.$white, 0.1);
            &:hover {
                background-color: rgba(color.$white, 0.2); 
            }
            & > * {
                font-size: size.$large-text;
            }
        }
    }
}