{"mappings":"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","sources":["<anon>","src/pages/app/index.ts","src/pages/app/app.jsx"],"sourcesContent":["(function () {\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequired5b2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1xLrT\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", function () { return $5795e1ab53747b88$export$2e2bcd8739ae039; });\n\nvar $hQdrk = parcelRequire(\"hQdrk\");\nvar $5795e1ab53747b88$export$2e2bcd8739ae039 = (0, $hQdrk.AppPage);\n\n});\nparcelRegister(\"hQdrk\", function(module, exports) {\n\n$parcel$export(module.exports, \"AppPage\", function () { return $40b025d4a79458e0$export$e2e9b8b5e72b52f3; });\n\nvar $dxWQo = parcelRequire(\"dxWQo\");\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\nvar $44iF5 = parcelRequire(\"44iF5\");\n\nvar $6cds3 = parcelRequire(\"6cds3\");\n\nvar $hDmOL = parcelRequire(\"hDmOL\");\n\nvar $kYkTt = parcelRequire(\"kYkTt\");\n\nvar $2jbdu = parcelRequire(\"2jbdu\");\n\nvar $1MoUG = parcelRequire(\"1MoUG\");\n\nvar $dc0x8 = parcelRequire(\"dc0x8\");\n\nvar $hAy3h = parcelRequire(\"hAy3h\");\n\nclass $40b025d4a79458e0$export$e2e9b8b5e72b52f3 extends (0, $6cds3.Component) {\n    fromJSON(json) {\n        this.clear();\n        const layout = (0, $dc0x8.STORAGE).layout;\n        if (!Array.isArray(json) || !json.length) return;\n        this.columnID = 0;\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu\n            }\n        };\n        for(let c in json){\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: []\n            };\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn\n                },\n                columnOrder: newColumnOrder\n            };\n            this.columnID++;\n            for(let t in json[c]){\n                let task = {\n                    id: `task-${this.taskID++}`,\n                    family: \"\",\n                    func: \"\",\n                    json: json[c][t]\n                };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n        (0, $dc0x8.STORAGE).setLayout(newLayout);\n    }\n    fromBase64(json) {\n        this.clear();\n        const layout = (0, $dc0x8.STORAGE).layout;\n        if (!Array.isArray(json) || !json.length) return;\n        this.columnID = 0;\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu\n            }\n        };\n        for(let c in json){\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: []\n            };\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn\n                },\n                columnOrder: newColumnOrder\n            };\n            this.columnID++;\n            for(let t in json[c]){\n                const { address: jsonAddress, actions: jsonActions } = json[c][t];\n                let task = {\n                    id: `task-${this.taskID++}`,\n                    family: \"\",\n                    func: \"\",\n                    json: {\n                        address: jsonAddress,\n                        actions: jsonActions.map((action)=>({\n                                func: action.func,\n                                args: JSON.parse((0, $44iF5.Base64).decode(action.args)),\n                                gas: action.gas,\n                                depo: action.depo\n                            }))\n                    }\n                };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n        (0, $dc0x8.STORAGE).setLayout(newLayout);\n    }\n    toJSON(omitOnError = false) {\n        const layout = (0, $dc0x8.STORAGE).layout;\n        let output = [];\n        for (let c of layout.columnOrder){\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds){\n                const task = TASKS.find((task)=>task.id === t);\n                if (task) {\n                    if (omitOnError) try {\n                        output[output.length - 1].push(task.instance.current.toCall());\n                    } catch (e) {\n                        continue;\n                    }\n                    else output[output.length - 1].push(task.instance.current.toCall());\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n        return output;\n    }\n    toBase64(omitOnError = false) {\n        const layout = (0, $dc0x8.STORAGE).layout;\n        let output = [];\n        for (let c of layout.columnOrder){\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds){\n                const task = TASKS.find((task)=>task.id === t);\n                if (task) {\n                    if (omitOnError) try {\n                        output[output.length - 1].push((0, $hAy3h.fromCall).toBase64(task.instance.current.toCall()));\n                    } catch (e) {\n                        continue;\n                    }\n                    else output[output.length - 1].push((0, $hAy3h.fromCall).toBase64(task.instance.current.toCall()));\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n        return output;\n    }\n    toErrors() {\n        var _window;\n        const layout = (0, $dc0x8.STORAGE).layout;\n        let output = [];\n        if (!((_window = window) === null || _window === void 0 ? void 0 : _window.TASKS)) return output;\n        const tasks = TASKS.filter((t)=>!layout.columns[\"menu\"].taskIds.includes(t.id)).map((t)=>t.instance.current);\n        for (let t of tasks)for (let e of t.schema.errors())output.push({\n            task: t,\n            message: e.message\n        });\n        return output;\n    }\n    export() {\n        return JSON.stringify({\n            schedules: this.toBase64()\n        });\n    }\n    empty() {\n        const layout = (0, $dc0x8.STORAGE).layout;\n        return layout.columnOrder.length === 1 && layout.columns[layout.columnOrder[0]].taskIds.length === 0;\n    }\n    setExpanded(expanded) {\n        this.expanded = expanded;\n        this.forceUpdate();\n        SIDEBAR.forceUpdate();\n    }\n    componentDidMount() {\n        window.SIDEBAR.switchPage(\"app\");\n        window.LAYOUT = this;\n        (0, $dc0x8.STORAGE).load();\n    }\n    render() {\n        const layout = (0, $dc0x8.STORAGE).layout;\n        return /*#__PURE__*/ (0, $lBpE3.jsxs)((0, $hDmOL.DragDropContext), {\n            onDragEnd: this.onDragEnd,\n            children: [\n                /*#__PURE__*/ (0, $lBpE3.jsx)((0, $hDmOL.Droppable), {\n                    droppableId: \"layout\",\n                    direction: \"horizontal\",\n                    type: \"column\",\n                    children: (provided)=>/*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                            className: \"layout-wrapper\",\n                            children: [\n                                /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                                    className: \"layout-container\",\n                                    tutorial: this.empty() ? \"yes\" : \"no\",\n                                    ...provided.droppableProps,\n                                    ref: provided.innerRef,\n                                    children: [\n                                        layout.columnOrder.map((columnId, index)=>{\n                                            const column = layout.columns[columnId];\n                                            const tasks = column.taskIds.map((taskId)=>layout.tasks[taskId]);\n                                            return /*#__PURE__*/ (0, $lBpE3.jsx)((0, $kYkTt.Column), {\n                                                column: column,\n                                                tasks: tasks,\n                                                index: index\n                                            }, column.id);\n                                        }),\n                                        provided.placeholder\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                                    className: `empty-container ${this.expanded ? \"expanded-empty\" : \"\"}`\n                                })\n                            ]\n                        })\n                }),\n                /*#__PURE__*/ (0, $lBpE3.jsx)((0, $2jbdu.Menu), {\n                    layout: this\n                })\n            ]\n        });\n    }\n    constructor(props){\n        super(props);\n        (0, $dxWQo._)(this, \"taskID\", 0);\n        (0, $dxWQo._)(this, \"columnID\", 1);\n        (0, $dxWQo._)(this, \"expanded\", false);\n        (0, $dxWQo._)(this, \"getTaskID\", ()=>this.taskID);\n        (0, $dxWQo._)(this, \"getColumnID\", ()=>this.columnID);\n        (0, $dxWQo._)(this, \"getTasks\", ()=>(0, $dc0x8.STORAGE).layout.tasks);\n        (0, $dxWQo._)(this, \"getColumns\", ()=>(0, $dc0x8.STORAGE).layout.columns);\n        (0, $dxWQo._)(this, \"deleteTask\", (taskId)=>{\n            const layout = (0, $dc0x8.STORAGE).layout;\n            const { columnId: columnId, taskIndex: taskIndex } = $40b025d4a79458e0$export$e2e9b8b5e72b52f3.findTaskCoordinates(taskId);\n            if (columnId == undefined || taskIndex == undefined) {\n                console.error(\"Task not found\");\n                return;\n            }\n            const column = layout.columns[columnId];\n            const taskIds = Array.from(column.taskIds);\n            taskIds.splice(taskIndex, 1);\n            const newColumn = {\n                ...column,\n                taskIds: taskIds\n            };\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [columnId]: newColumn\n                }\n            };\n            (0, $dc0x8.STORAGE).setLayout(newLayout);\n        });\n        (0, $dxWQo._)(this, \"duplicateTask\", (taskId)=>{\n            const layout = (0, $dc0x8.STORAGE).layout;\n            const { columnId: columnId, taskIndex: taskIndex } = $40b025d4a79458e0$export$e2e9b8b5e72b52f3.findTaskCoordinates(taskId);\n            if (columnId == undefined || taskIndex == undefined) {\n                console.error(\"Task not found\");\n                return;\n            }\n            // create new task\n            const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n            taskClone.id = `task-${this.taskID}`;\n            const column = layout.columns[columnId];\n            const taskIds = Array.from(column.taskIds);\n            taskIds.splice(taskIndex, 0, taskClone.id);\n            this.taskID++;\n            const newColumn = {\n                ...column,\n                taskIds: taskIds\n            };\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [columnId]: newColumn\n                },\n                tasks: {\n                    ...layout.tasks,\n                    [taskClone.id]: taskClone\n                }\n            };\n            window.COPY = {\n                from: taskId,\n                to: taskClone.id\n            };\n            (0, $dc0x8.STORAGE).setLayout(newLayout);\n        });\n        (0, $dxWQo._)(this, \"clear\", ()=>{\n            var _window_EDITOR;\n            console.warn(\"layout cleared\");\n            // clear card content\n            if (window.TASKS) window.TASKS = [];\n            this.taskID = 0;\n            this.columnID = 1;\n            (_window_EDITOR = window.EDITOR) === null || _window_EDITOR === void 0 ? void 0 : _window_EDITOR.edit(null);\n            (0, $dc0x8.STORAGE).setLayout((0, $1MoUG.initialData));\n        });\n        (0, $dxWQo._)(this, \"deleteColumn\", (index)=>{\n            const layout = (0, $dc0x8.STORAGE).layout;\n            const newColumnOrder = Array.from(layout.columnOrder);\n            newColumnOrder.splice(index, 1);\n            let newLayout = {\n                ...layout,\n                columnOrder: newColumnOrder\n            };\n            // list should never be empty\n            if (newColumnOrder.length === 0) newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [`column-${this.columnID}`]: {\n                        id: `column-${this.columnID}`,\n                        title: \"Drag here\",\n                        taskIds: []\n                    }\n                },\n                columnOrder: [\n                    `column-${this.columnID++}`\n                ]\n            };\n            (0, $dc0x8.STORAGE).setLayout(newLayout);\n        });\n        (0, $dxWQo._)(this, \"addColumn\", ()=>{\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: []\n            };\n            const layout = (0, $dc0x8.STORAGE).layout;\n            const newColumnOrder = Array.from(layout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [`column-${this.columnID}`]: newColumn\n                },\n                columnOrder: newColumnOrder\n            };\n            this.columnID++;\n            (0, $dc0x8.STORAGE).setLayout(newLayout);\n        });\n        (0, $dxWQo._)(this, \"onDragEnd\", (result)=>{\n            const layout = (0, $dc0x8.STORAGE).layout;\n            const { destination: destination, source: source, draggableId: draggableId, type: type } = result;\n            if (!destination) return;\n            if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n            if (type === \"column\") {\n                const newColumnOrder = Array.from(layout.columnOrder);\n                newColumnOrder.splice(source.index, 1);\n                newColumnOrder.splice(destination.index, 0, draggableId);\n                const newLayout = {\n                    ...layout,\n                    columnOrder: newColumnOrder\n                };\n                (0, $dc0x8.STORAGE).setLayout(newLayout);\n                return;\n            }\n            const start = layout.columns[source.droppableId];\n            const finish = layout.columns[destination.droppableId];\n            if (!start || !finish) {\n                console.warn(`Something went wrong when dragging from ${start} to ${finish}`);\n                return;\n            }\n            if (start === finish) {\n                const newTaskIds = Array.from(start.taskIds);\n                newTaskIds.splice(source.index, 1);\n                newTaskIds.splice(destination.index, 0, draggableId);\n                const newColumn = {\n                    ...start,\n                    taskIds: newTaskIds\n                };\n                const newLayout = {\n                    ...layout,\n                    columns: {\n                        ...layout.columns,\n                        [newColumn.id]: newColumn\n                    }\n                };\n                (0, $dc0x8.STORAGE).setLayout(newLayout);\n            } else {\n                let newStart;\n                if (finish.id === \"menu\") return;\n                if (start.id === \"menu\") {\n                    const startTaskIds = Array.from(start.taskIds);\n                    // change taskId\n                    const taskId = startTaskIds[source.index];\n                    startTaskIds[source.index] = `task-${this.taskID}`;\n                    // create new task\n                    const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n                    taskClone.id = `task-${this.taskID}`;\n                    (0, $dc0x8.STORAGE).layout.tasks[taskClone.id] = taskClone;\n                    this.taskID++;\n                    newStart = {\n                        ...start,\n                        taskIds: startTaskIds\n                    };\n                } else {\n                    const startTaskIds = Array.from(start.taskIds);\n                    startTaskIds.splice(source.index, 1);\n                    newStart = {\n                        ...start,\n                        taskIds: startTaskIds\n                    };\n                }\n                const finishTaskIds = Array.from(finish.taskIds);\n                finishTaskIds.splice(destination.index, 0, draggableId);\n                const newFinish = {\n                    ...finish,\n                    taskIds: finishTaskIds\n                };\n                const newLayout = {\n                    ...layout,\n                    columns: {\n                        ...layout.columns,\n                        [newStart.id]: newStart,\n                        [newFinish.id]: newFinish\n                    }\n                };\n                (0, $dc0x8.STORAGE).setLayout(newLayout);\n            }\n        });\n        this.clear();\n        document.addEventListener(\"onlayoutupdated\", ()=>this.forceUpdate());\n    }\n}\n// TODO delete elements after exjecting from tasklist / columnlist\n/**\n   * returns column ID and index inside column's taskIds for a given taskId\n   *\n   * @param {string} taskId\n   * @returns {object}\n   */ (0, $dxWQo._)($40b025d4a79458e0$export$e2e9b8b5e72b52f3, \"findTaskCoordinates\", (taskId)=>{\n    let index;\n    const layout = (0, $dc0x8.STORAGE).layout;\n    const colId = layout.columnOrder.find((colId)=>{\n        index = layout.columns[colId].taskIds.indexOf(taskId);\n        return index >= 0;\n    });\n    return {\n        columnId: colId,\n        taskIndex: index\n    };\n});\n\n});\n\n\n})();\n//# sourceMappingURL=app.a3ddf2d6.js.map\n","import { AppPage } from \"./app\";\nexport default AppPage;\n","import { Base64 } from \"js-base64\";\nimport { Component } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport { Column } from \"../../widgets/column/column.jsx\";\nimport { Menu } from \"../../widgets/menu/menu.jsx\";\nimport { initialData } from \"../../entities/task/config/initial-data\";\nimport { STORAGE } from \"../../shared/lib/persistent\";\nimport { fromCall } from \"../../shared/lib/call\";\n\nimport \"./app.scss\";\n\nexport class AppPage extends Component {\n    taskID = 0;\n    columnID = 1;\n\n    expanded = false;\n\n    constructor(props) {\n        super(props);\n\n        this.clear();\n\n        document.addEventListener(\"onlayoutupdated\", () => this.forceUpdate());\n    }\n\n    getTaskID = () => this.taskID;\n\n    getColumnID = () => this.columnID;\n\n    getTasks = () => STORAGE.layout.tasks;\n\n    getColumns = () => STORAGE.layout.columns;\n\n    // TODO delete elements after exjecting from tasklist / columnlist\n\n    /**\n     * returns column ID and index inside column's taskIds for a given taskId\n     *\n     * @param {string} taskId\n     * @returns {object}\n     */\n    static findTaskCoordinates = (taskId) => {\n        let index;\n        const layout = STORAGE.layout;\n        const colId = layout.columnOrder.find((colId) => {\n            index = layout.columns[colId].taskIds.indexOf(taskId);\n            return index >= 0;\n        });\n\n        return { columnId: colId, taskIndex: index };\n    };\n\n    deleteTask = (taskId) => {\n        const layout = STORAGE.layout;\n        const { columnId, taskIndex } = AppPage.findTaskCoordinates(taskId);\n\n        if (columnId == undefined || taskIndex == undefined) {\n            console.error(\"Task not found\");\n            return;\n        }\n\n        const column = layout.columns[columnId];\n        const taskIds = Array.from(column.taskIds);\n        taskIds.splice(taskIndex, 1);\n        const newColumn = {\n            ...column,\n            taskIds: taskIds,\n        };\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [columnId]: newColumn,\n            },\n        };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    duplicateTask = (taskId) => {\n        const layout = STORAGE.layout;\n        const { columnId, taskIndex } = AppPage.findTaskCoordinates(taskId);\n\n        if (columnId == undefined || taskIndex == undefined) {\n            console.error(\"Task not found\");\n            return;\n        }\n\n        // create new task\n        const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n        taskClone.id = `task-${this.taskID}`;\n\n        const column = layout.columns[columnId];\n        const taskIds = Array.from(column.taskIds);\n        taskIds.splice(taskIndex, 0, taskClone.id);\n\n        this.taskID++;\n\n        const newColumn = {\n            ...column,\n            taskIds: taskIds,\n        };\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [columnId]: newColumn,\n            },\n            tasks: {\n                ...layout.tasks,\n                [taskClone.id]: taskClone,\n            },\n        };\n\n        window.COPY = {\n            from: taskId,\n            to: taskClone.id,\n        };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    clear = () => {\n        console.warn(\"layout cleared\");\n\n        // clear card content\n        if (window.TASKS) window.TASKS = [];\n\n        this.taskID = 0;\n        this.columnID = 1;\n\n        window.EDITOR?.edit(null);\n        STORAGE.setLayout(initialData);\n    };\n\n    deleteColumn = (index) => {\n        const layout = STORAGE.layout;\n        const newColumnOrder = Array.from(layout.columnOrder);\n        newColumnOrder.splice(index, 1);\n\n        let newLayout = {\n            ...layout,\n            columnOrder: newColumnOrder,\n        };\n\n        // list should never be empty\n        if (newColumnOrder.length === 0)\n            newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [`column-${this.columnID}`]: {\n                        id: `column-${this.columnID}`,\n                        title: \"Drag here\",\n                        taskIds: [],\n                    },\n                },\n                columnOrder: [`column-${this.columnID++}`],\n            };\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    addColumn = () => {\n        const newColumn = {\n            id: `column-${this.columnID}`,\n            title: \"Drag here\",\n            taskIds: [],\n        };\n\n        const layout = STORAGE.layout;\n        const newColumnOrder = Array.from(layout.columnOrder);\n        newColumnOrder.push(`column-${this.columnID}`);\n\n        const newLayout = {\n            ...layout,\n            columns: {\n                ...layout.columns,\n                [`column-${this.columnID}`]: newColumn,\n            },\n            columnOrder: newColumnOrder,\n        };\n\n        this.columnID++;\n\n        STORAGE.setLayout(newLayout);\n    };\n\n    onDragEnd = (result) => {\n        const layout = STORAGE.layout;\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) return;\n\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n        if (type === \"column\") {\n            const newColumnOrder = Array.from(layout.columnOrder);\n\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n\n            const newLayout = {\n                ...layout,\n                columnOrder: newColumnOrder,\n            };\n\n            STORAGE.setLayout(newLayout);\n\n            return;\n        }\n\n        const start = layout.columns[source.droppableId];\n        const finish = layout.columns[destination.droppableId];\n\n        if (!start || !finish) {\n            console.warn(`Something went wrong when dragging from ${start} to ${finish}`);\n            return;\n        }\n\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds,\n            };\n\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [newColumn.id]: newColumn,\n                },\n            };\n\n            STORAGE.setLayout(newLayout);\n        } else {\n            let newStart;\n\n            if (finish.id === \"menu\") return;\n\n            if (start.id === \"menu\") {\n                const startTaskIds = Array.from(start.taskIds);\n\n                // change taskId\n                const taskId = startTaskIds[source.index];\n                startTaskIds[source.index] = `task-${this.taskID}`;\n\n                // create new task\n                const taskClone = JSON.parse(JSON.stringify(layout.tasks[taskId.toString()]));\n                taskClone.id = `task-${this.taskID}`;\n                STORAGE.layout.tasks[taskClone.id] = taskClone;\n\n                this.taskID++;\n\n                newStart = {\n                    ...start,\n                    taskIds: startTaskIds,\n                };\n            } else {\n                const startTaskIds = Array.from(start.taskIds);\n                startTaskIds.splice(source.index, 1);\n                newStart = {\n                    ...start,\n                    taskIds: startTaskIds,\n                };\n            }\n\n            const finishTaskIds = Array.from(finish.taskIds);\n            finishTaskIds.splice(destination.index, 0, draggableId);\n            const newFinish = {\n                ...finish,\n                taskIds: finishTaskIds,\n            };\n\n            const newLayout = {\n                ...layout,\n                columns: {\n                    ...layout.columns,\n                    [newStart.id]: newStart,\n                    [newFinish.id]: newFinish,\n                },\n            };\n\n            STORAGE.setLayout(newLayout);\n        }\n    };\n\n    fromJSON(json) {\n        this.clear();\n\n        const layout = STORAGE.layout;\n\n        if (!Array.isArray(json) || !json.length) return;\n\n        this.columnID = 0;\n\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu,\n            },\n        };\n\n        for (let c in json) {\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: [],\n            };\n\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn,\n                },\n                columnOrder: newColumnOrder,\n            };\n\n            this.columnID++;\n\n            for (let t in json[c]) {\n                let task = { id: `task-${this.taskID++}`, family: \"\", func: \"\", json: json[c][t] };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n\n        STORAGE.setLayout(newLayout);\n    }\n\n    fromBase64(json) {\n        this.clear();\n\n        const layout = STORAGE.layout;\n\n        if (!Array.isArray(json) || !json.length) return;\n\n        this.columnID = 0;\n\n        let newLayout = {\n            ...layout,\n            columnOrder: [],\n            columns: {\n                menu: layout.columns.menu,\n            },\n        };\n\n        for (let c in json) {\n            const newColumn = {\n                id: `column-${this.columnID}`,\n                title: \"Drag here\",\n                taskIds: [],\n            };\n\n            const newColumnOrder = Array.from(newLayout.columnOrder);\n            newColumnOrder.push(`column-${this.columnID}`);\n\n            newLayout = {\n                ...newLayout,\n                columns: {\n                    ...newLayout.columns,\n                    [`column-${this.columnID}`]: newColumn,\n                },\n                columnOrder: newColumnOrder,\n            };\n\n            this.columnID++;\n\n            for (let t in json[c]) {\n                const { address: jsonAddress, actions: jsonActions } = json[c][t];\n                let task = {\n                    id: `task-${this.taskID++}`,\n                    family: \"\",\n                    func: \"\",\n                    json: {\n                        address: jsonAddress,\n                        actions: jsonActions.map((action) => ({\n                            func: action.func,\n                            args: JSON.parse(Base64.decode(action.args)),\n                            gas: action.gas,\n                            depo: action.depo,\n                        })),\n                    },\n                };\n                newLayout.columns[newColumn.id].taskIds.push(task.id);\n                newLayout.tasks[task.id] = task;\n            }\n        }\n\n        STORAGE.setLayout(newLayout);\n    }\n\n    toJSON(omitOnError = false) {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        for (let c of layout.columnOrder) {\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds) {\n                const task = TASKS.find((task) => task.id === t);\n                if (task) {\n                    if (omitOnError) {\n                        try {\n                            output[output.length - 1].push(task.instance.current.toCall());\n                        } catch (e) {\n                            continue;\n                        }\n                    } else output[output.length - 1].push(task.instance.current.toCall());\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n\n        return output;\n    }\n\n    toBase64(omitOnError = false) {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        for (let c of layout.columnOrder) {\n            if (layout.columns[c].taskIds.length === 0) continue;\n            output.push([]);\n            for (let t of layout.columns[c].taskIds) {\n                const task = TASKS.find((task) => task.id === t);\n                if (task) {\n                    if (omitOnError) {\n                        try {\n                            output[output.length - 1].push(fromCall.toBase64(task.instance.current.toCall()));\n                        } catch (e) {\n                            continue;\n                        }\n                    } else output[output.length - 1].push(fromCall.toBase64(task.instance.current.toCall()));\n                } else console.warn(`no task with id ${t}`);\n            }\n        }\n\n        return output;\n    }\n\n    toErrors() {\n        const layout = STORAGE.layout;\n        let output = [];\n\n        if (!window?.TASKS) return output;\n\n        const tasks = TASKS.filter((t) => !layout.columns[\"menu\"].taskIds.includes(t.id)).map(\n            (t) => t.instance.current\n        );\n\n        for (let t of tasks)\n            for (let e of t.schema.errors())\n                output.push({\n                    task: t,\n                    message: e.message,\n                });\n\n        return output;\n    }\n\n    export() {\n        return JSON.stringify({\n            schedules: this.toBase64(),\n        });\n    }\n\n    empty() {\n        const layout = STORAGE.layout;\n        return layout.columnOrder.length === 1 && layout.columns[layout.columnOrder[0]].taskIds.length === 0;\n    }\n\n    setExpanded(expanded) {\n        this.expanded = expanded;\n        this.forceUpdate();\n        SIDEBAR.forceUpdate();\n    }\n\n    componentDidMount() {\n        window.SIDEBAR.switchPage(\"app\");\n        window.LAYOUT = this;\n        STORAGE.load();\n    }\n\n    render() {\n        const layout = STORAGE.layout;\n\n        return (\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <Droppable\n                    droppableId=\"layout\"\n                    direction=\"horizontal\"\n                    type=\"column\"\n                >\n                    {(provided) => (\n                        <div className=\"layout-wrapper\">\n                            <div\n                                className=\"layout-container\"\n                                tutorial={this.empty() ? \"yes\" : \"no\"}\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                            >\n                                {layout.columnOrder.map((columnId, index) => {\n                                    const column = layout.columns[columnId];\n                                    const tasks = column.taskIds.map((taskId) => layout.tasks[taskId]);\n\n                                    return (\n                                        <Column\n                                            key={column.id}\n                                            column={column}\n                                            tasks={tasks}\n                                            index={index}\n                                        />\n                                    );\n                                })}\n                                {provided.placeholder}\n                            </div>\n                            <div className={`empty-container ${this.expanded ? \"expanded-empty\" : \"\"}`}></div>\n                        </div>\n                    )}\n                </Droppable>\n                <Menu layout={this} />\n            </DragDropContext>\n        );\n    }\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","value","$5795e1ab53747b88$export$2e2bcd8739ae039","$hQdrk","AppPage","$40b025d4a79458e0$export$e2e9b8b5e72b52f3","$dxWQo","$lBpE3","$44iF5","$6cds3","$hDmOL","$kYkTt","$2jbdu","$1MoUG","$dc0x8","$hAy3h","Component","fromJSON","json","clear","layout","STORAGE","Array","isArray","length","columnID","newLayout","columnOrder","columns","menu","c","newColumn","id","title","taskIds","newColumnOrder","from","t","push","task","taskID","family","func","tasks","setLayout","fromBase64","address","jsonAddress","actions","jsonActions","map","action","args","JSON","parse","Base64","decode","gas","depo","toJSON","omitOnError","output","TASKS","find","instance","current","toCall","console","warn","toBase64","fromCall","toErrors","_window","filter","includes","schema","errors","message","export","stringify","schedules","empty","setExpanded","expanded","forceUpdate","SIDEBAR","componentDidMount","switchPage","LAYOUT","load","render","jsxs","DragDropContext","onDragEnd","children","jsx","Droppable","droppableId","direction","type","provided","className","tutorial","droppableProps","ref","innerRef","columnId","index","column","taskId","Column","placeholder","Menu","constructor","props","_","taskIndex","findTaskCoordinates","undefined","error","splice","taskClone","toString","COPY","to","_window_EDITOR","EDITOR","edit","initialData","result","destination","source","draggableId","start","finish","newTaskIds","newStart","startTaskIds","finishTaskIds","newFinish","document","addEventListener","colId","indexOf","getTaskID","getColumnID","getTasks","getColumns","deleteTask","duplicateTask","deleteColumn","addColumn"],"version":3,"file":"app.a3ddf2d6.js.map"}