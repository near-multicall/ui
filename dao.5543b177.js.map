{"mappings":"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","sources":["src/pages/dao/index.ts","src/pages/dao/dao.tsx","node_modules/@mui/icons-material/esm/PauseOutlined.js","node_modules/@mui/icons-material/esm/PlayArrowOutlined.js","src/pages/dao/settings/settings.tsx","src/pages/dao/funds/funds.tsx","src/pages/dao/jobs/jobs.tsx"],"sourcesContent":["import { DaoPage } from \"./dao\";\nexport default DaoPage;\n","import { DeleteOutline, EditOutlined, PauseOutlined, PlayArrowOutlined } from \"@mui/icons-material\";\nimport { Base64 } from \"js-base64\";\nimport debounce from \"lodash.debounce\";\nimport { Component, ContextType } from \"react\";\n\nimport { MI, Wallet } from \"../../entities\";\nimport { Form, Formik } from \"formik\";\nimport { args } from \"../../shared/lib/args/args\";\nimport { fields } from \"../../shared/lib/args/args-types/args-object\";\nimport { Multicall } from \"../../shared/lib/contracts/multicall\";\nimport type { ProposalOutput } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { SputnikDAO, SputnikUI } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { Big, toGas, toYocto } from \"../../shared/lib/converter\";\nimport { STORAGE } from \"../../shared/lib/persistent\";\nimport { signAndSendTxs } from \"../../shared/lib/wallet\";\nimport { Tabs } from \"../../shared/ui/design\";\n\nimport { TextField } from \"../../shared/ui/form\";\nimport { DaoSettingsTab } from \"./settings/settings\";\nimport \"./dao.scss\";\nimport { DaoFundsTab } from \"./funds/funds\";\nimport { DaoJobsTab } from \"./jobs/jobs\";\n\nconst Ctx = Wallet.trySelectorContext();\n\ninterface Props {}\n\ninterface State {\n    formData: {\n        addr: string;\n    };\n    dao: SputnikDAO;\n    multicall: Multicall;\n    loading: boolean;\n    proposed: number;\n    proposedInfo: ProposalOutput | null;\n}\n\nconst _DaoPage = \"DaoPage\";\nexport class DaoPage extends Component<Props, State> {\n    static contextType = Ctx;\n    declare context: ContextType<typeof Ctx>;\n\n    schema = args\n        .object()\n        .shape({\n            addr: args\n                .object()\n                .shape({\n                    noAddress: args.string().address().retain({ initial: true }),\n                    noDao: args.string().sputnikDao().retain({ initial: true }),\n                    noMulticall: args.string().multicall().retain({\n                        customMessage: \"DAO does not have a multicall instance\",\n                        initial: true,\n                    }),\n                })\n                .transform((_, addr) => ({\n                    noAddress: addr,\n                    noDao: addr,\n                    noMulticall: this.toMulticallAddress(addr),\n                }))\n                .retain(),\n        })\n        .retain();\n\n    tryLoadInfoDebounced = debounce(() => this.tryLoadInfo(), 400);\n\n    lastAddr: string | null;\n    fee: string = \"\";\n    formikSetValues?: (fields: State[\"formData\"], shouldValidate?: boolean) => void;\n\n    constructor(props: Props) {\n        super(props);\n\n        const addr = STORAGE.addresses.dao;\n\n        this.state = {\n            formData: {\n                addr,\n            },\n\n            dao: new SputnikDAO(addr),\n            multicall: new Multicall(this.toMulticallAddress(addr)),\n\n            loading: false,\n            proposed: -1,\n            proposedInfo: null,\n        };\n\n        this.schema.check(this.state.formData);\n\n        Multicall.getFactoryFee().then((multicallFactoryFee) => {\n            this.fee = multicallFactoryFee;\n            this.tryLoadInfo();\n        });\n\n        this.lastAddr = null;\n    }\n\n    setFormData(newFormData: State[\"formData\"], callback?: () => void | undefined) {\n        this.setState(\n            {\n                formData: {\n                    ...this.state.formData,\n                    ...newFormData,\n                },\n            },\n            callback\n        );\n    }\n\n    toMulticallAddress(addr: string): string {\n        return args\n            .string()\n            .ensure()\n            .intoBaseAddress()\n            .append(\".\" + Multicall.FACTORY_ADDRESS)\n            .cast(addr);\n    }\n\n    /**\n     * check if DAO has a proposal to create multicall instance.\n     * proposal must be in progress, and not expired.\n     *\n     * @returns {object} ID and info of proposal to create multicall instance,\n     */\n    async proposalAlreadyExists(\n        dao: SputnikDAO\n    ): Promise<{ proposal_id: number; proposal_info: ProposalOutput | null }> {\n        // Date.now() returns timestamp in milliseconds, SputnikDAO uses nanoseconds\n        const currentTime = Big(Date.now()).times(\"1000000\");\n        const lastProposalId = dao.lastProposalId;\n        const proposalPeriod = dao.policy.proposal_period;\n\n        // get last 100 DAO proposals\n        const proposals = await dao.getProposals({\n            from_index: lastProposalId < 100 ? 0 : lastProposalId - 100,\n            limit: 100,\n        });\n        // Look for active \"Create multicall\" proposals\n        const activeProposals = proposals.filter(\n            (proposal) =>\n                // discard if not active proposal to create multicall instance\n\n                proposal.kind?.FunctionCall?.receiver_id === Multicall.FACTORY_ADDRESS &&\n                proposal.kind?.FunctionCall?.actions?.[0]?.method_name === \"create\" &&\n                proposal.status === \"InProgress\" &&\n                Big(proposal.submission_time).add(proposalPeriod).gt(currentTime)\n        );\n\n        // If there many \"Create multicall\" proposals, return latest.\n        if (activeProposals.length > 0) {\n            const lastProposal = activeProposals.pop()!;\n            return { proposal_id: lastProposal.id, proposal_info: lastProposal };\n        }\n        // No \"Create multicall\" proposals found.\n        else return { proposal_id: -1, proposal_info: null };\n    }\n\n    onAddressesUpdated(e: CustomEvent<{ dao: string }>) {\n        if (e.detail.dao !== this.state.formData.addr) {\n            this.setState({\n                multicall: new Multicall(this.toMulticallAddress(e.detail.dao)),\n            });\n            this.formikSetValues?.({ addr: e.detail.dao });\n        }\n    }\n\n    createMulticall() {\n        const { accountId } = this.context!;\n        const { loading, dao, proposed, proposedInfo, formData } = this.state;\n        const { noMulticall, noDao } = fields(this.schema, \"addr\");\n\n        if (\n            this.fee === \"\" ||\n            // wallet not logged in or DAO object not initialized yet\n            dao?.ready !== true\n        ) {\n            return null;\n        }\n\n        const multicallAddress = this.toMulticallAddress(formData.addr);\n\n        const depo = Big(this.fee).plus(MI.MIN_BALANCE);\n        const daoSearchInput: HTMLInputElement = document.querySelector(\".DaoSearch input\")!;\n\n        /**\n         * Can user propose a FunctionCall to DAO?\n         */\n        const canPropose = dao.checkUserPermission(accountId!, \"AddProposal\", \"FunctionCall\");\n\n        /**\n         * Can user vote approve a FunctionCall on the DAO?\n         */\n        const canApprove = dao.checkUserPermission(accountId!, \"VoteApprove\", \"FunctionCall\");\n\n        const args = {\n            proposal: {\n                description: `create multicall instance for this DAO at ${multicallAddress}`,\n                kind: {\n                    FunctionCall: {\n                        receiver_id: Multicall.FACTORY_ADDRESS,\n\n                        actions: [\n                            {\n                                method_name: \"create\",\n                                args: Base64.encode(\n                                    JSON.stringify({\n                                        multicall_init_args: {\n                                            admin_accounts: [dao.address],\n                                            croncat_manager: window.nearConfig.CRONCAT_MANAGER_ADDRESS,\n                                            job_bond: dao.policy.proposal_bond,\n                                        },\n\n                                        public_key: \"HdJuXFRBKMEXuzEsXVscdd3aoBvEGGXDKQ3JoNhqJ4uU\",\n                                    })\n                                ),\n\n                                deposit: depo.toFixed(),\n                                gas: toGas(\"150\"),\n                            },\n                        ],\n                    },\n                },\n            },\n        };\n\n        if (\n            noMulticall.isBad() &&\n            !noDao.isBad() && // base.sputnik-dao.near does not exist\n            !loading &&\n            // disappear while debouncing\n            this.lastAddr === daoSearchInput.value\n        ) {\n            if (proposed === -1) {\n                // no create multicall proposal exists\n\n                if (canPropose) {\n                    // ... and user can propose FunctionCall\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`A multicall instance can only be created for `}\n\n                                <a\n                                    href={dao.getDaoUrl(SputnikUI.ASTRO_UI)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {dao.address}\n                                </a>\n\n                                {` by making a proposal.`}\n                            </div>\n\n                            <button\n                                className=\"create-multicall\"\n                                onClick={() => {\n                                    dao.addProposal(args).then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                Propose\n                            </button>\n                        </>\n                    );\n                } else {\n                    // ... and user cannot propose FunctionCall\n\n                    return (\n                        <div className=\"Alert\">\n                            {/* hint: you can use \"ref-community-board-testnet\" as DAO to get to this message */}\n                            {`This DAO has no multicall instance. A DAO member with proposing permissions should make a proposal.`}\n                        </div>\n                    );\n                }\n            } else if (proposed !== -1) {\n                // create multicall proposal exists\n\n                if (!canApprove) {\n                    // user does not have rights to VoteApprove\n\n                    return (\n                        <div className=\"Alert\">\n                            {`Proposal to create a multicall exists (#${proposed}), but you have no voting permissions on this DAO.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else if (proposedInfo?.votes[accountId!]) {\n                    // user can VoteApprove and already voted\n\n                    return (\n                        <div className=\"Alert\">\n                            {`You have voted on creating a multicall instance for this DAO. It will be created as soon as the proposal passes voting.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else {\n                    // user can VoteApprove and did NOT vote yet.\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`There exists a proposal (#${proposed}) to create a multicall instance for this DAO. `}\n\n                                <a\n                                    href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Open on AstroDAO\n                                </a>\n                            </div>\n\n                            <button\n                                className=\"create-multicall proposal-exists\"\n                                onClick={() => {\n                                    dao.actProposal(proposed, \"VoteApprove\").then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                {`vote YES`}\n                            </button>\n                        </>\n                    );\n                }\n            }\n        }\n    }\n\n    toLink(address: string, deleteIcon = true) {\n        return (\n            <span>\n                <a\n                    href={args.string().address().intoUrl().cast(address)}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {address}\n                </a>\n                {deleteIcon ? <DeleteOutline /> : null}\n            </span>\n        );\n    }\n\n    job(job: any) {\n        return (\n            <div className=\"JobsList-item\">\n                <EditOutlined />\n                <DeleteOutline />\n                {job.is_active ? <PauseOutlined /> : <PlayArrowOutlined />}\n                <pre>{JSON.stringify(job, null, \"  \")}</pre>\n            </div>\n        );\n    }\n\n    tryLoadInfo() {\n        if (this.lastAddr === this.state.formData.addr) return;\n        this.lastAddr = this.state.formData.addr;\n        this.schema.check(this.state.formData).then(() => {\n            const { noDao } = fields(this.schema, \"addr\");\n            if (!this.schema.isBad()) {\n                // case 0: DAO and Multicall exist\n                this.confidentlyLoadInfo();\n            } else if (!noDao.isBad()) {\n                // case 1: Only DAO exists\n                this.confidentlyLoadOnlyDaoInfo();\n            } else {\n                // case 2: neither exist\n                this.setState({\n                    proposed: -1,\n                    proposedInfo: null,\n                    dao: new SputnikDAO(this.state.formData.addr), // will be invalid\n                });\n            }\n        });\n    }\n\n    confidentlyLoadOnlyDaoInfo() {\n        const { addr } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(addr);\n\n        this.setState({ loading: true });\n\n        // initialize DAO object\n        SputnikDAO.init(addr)\n            .catch((e) => new SputnikDAO(addr))\n            .then((newDao) => {\n                // some error happened during DAO object init.\n                if (!newDao.ready) {\n                    this.setState({\n                        dao: newDao,\n                        multicall: new Multicall(multicallAddress),\n                        loading: false,\n                    });\n                    return;\n                } else {\n                    this.proposalAlreadyExists(newDao)\n                        .catch((e) => {})\n                        .then((proposalData) =>\n                            this.setState({\n                                dao: newDao,\n                                multicall: new Multicall(multicallAddress),\n                                loading: false,\n                                proposed: proposalData?.proposal_id ?? -1,\n                                proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                            })\n                        );\n                }\n            });\n    }\n\n    confidentlyLoadInfo() {\n        const { addr: daoAddress } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(daoAddress);\n\n        this.setState({ loading: true });\n\n        Promise.all([\n            SputnikDAO.init(daoAddress).catch((e) => new SputnikDAO(daoAddress)),\n            Multicall.init(multicallAddress).catch((e) => new Multicall(multicallAddress)),\n        ]).then(([newDao, newMulticall]) => {\n            // some error happened during DAO object init.\n            if (!newDao.ready || !newMulticall.ready) {\n                this.setState({\n                    dao: newDao,\n                    multicall: newMulticall,\n                    loading: false,\n                });\n            } else {\n                this.proposalAlreadyExists(newDao)\n                    .catch((e) => {})\n                    .then((proposalData) =>\n                        this.setState({\n                            dao: newDao,\n                            multicall: newMulticall,\n                            loading: false,\n                            proposed: proposalData?.proposal_id ?? -1,\n                            proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                        })\n                    );\n            }\n        });\n    }\n\n    getContent() {\n        const { selector: walletSelector } = this.context!;\n        const { dao, loading, multicall } = this.state;\n\n        // if user not logged in, remind them to sign in.\n        // TODO: only require signIn when DAO has no multicall instance (to know if user can propose or vote on existing proposal to create multicall)\n        if (!walletSelector.isSignedIn()) {\n            return <div className=\"DaoPage-content error\">Please sign in to continue</div>;\n        }\n\n        // errors to display\n        const displayErrorsList = [\"noAddress\", \"noDao\", \"noMulticall\"];\n        const displayErrors = Object.entries(fields(this.schema, \"addr\"))\n            .filter(([k, v]) => v.isBad() && displayErrorsList.includes(k))\n            .map(([k, v]) => (\n                <p\n                    key={`p-${k}`}\n                    className={\"red\"}\n                >\n                    <span>{v.isBad() ? \"\\u2717\" : \"\\u2714\"} </span>\n                    {v.message()}\n                </p>\n            ));\n\n        if (displayErrors.length > 0)\n            return (\n                <>\n                    <div className=\"DaoPage-content error\">\n                        <div>{displayErrors}</div>\n                        {this.createMulticall()}\n                    </div>\n                </>\n            );\n\n        if (loading) return <div className=\"DaoPage-content loader\" />;\n\n        /*\n         * Everything should be loaded\n         */\n        if (!multicall.admins || !multicall.tokensWhitelist || !multicall.jobBond) {\n            console.error(\"multicall infos incomplete\", multicall);\n            return <div className=\"DaoPage-content error\">Unexpected error! Multicall might be outdated.</div>;\n        }\n\n        return (\n            <Tabs\n                classes={{\n                    root: \"DaoPage-tabs\",\n                    buttonsPanel: \"DaoPage-tabs-buttonsPanel\",\n                    contentSpace: \"DaoPage-tabs-contentSpace\",\n                }}\n                items={[\n                    DaoSettingsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoFundsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoJobsTab.uiConnect({ className: `${_DaoPage}-content`, multicallInstance: multicall }),\n                ]}\n            />\n        );\n    }\n\n    componentDidMount(): void {\n        window.SIDEBAR.switchPage(\"dao\");\n        document.addEventListener(\"onaddressesupdated\", (event) => this.onAddressesUpdated(event as CustomEvent));\n    }\n\n    render() {\n        return (\n            <div className=\"DaoPage\">\n                <div className=\"DaoPage-header\">\n                    <div className=\"DaoSearch\">\n                        <Formik\n                            initialValues={{ addr: STORAGE.addresses.dao ?? \"\" }}\n                            validate={(values) => {\n                                this.setFormData({ addr: values.addr });\n                                this.tryLoadInfoDebounced();\n                            }}\n                            onSubmit={() => {}}\n                        >\n                            {({ setValues }) => {\n                                this.formikSetValues = setValues;\n\n                                return (\n                                    <Form>\n                                        <TextField\n                                            name=\"addr\"\n                                            placeholder=\"Search for DAOs\"\n                                            hiddenLabel={true}\n                                            variant=\"standard\"\n                                            autoFocus\n                                        />\n                                    </Form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n\n                {this.getContent()}\n            </div>\n        );\n    }\n}\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'PauseOutlined');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 8.64 15.27 12 10 15.36V8.64M8 5v14l11-7L8 5z\"\n}), 'PlayArrowOutlined');","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { SettingsEditor, SettingsEditorModule } from \"../../../widgets\";\n\nimport \"./settings.scss\";\n\ninterface DaoSettingsTabUIProps extends HTMLProps<HTMLDivElement>, SettingsEditorModule.Inputs {}\n\nconst _DaoSettingsTab = \"DaoSettingsTab\";\n\nconst DaoSettingsTabUI = ({ className, adapters, ...props }: DaoSettingsTabUIProps) => (\n    <div\n        className={clsx(_DaoSettingsTab, className)}\n        {...props}\n    >\n        <SettingsEditor.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoSettingsTab = {\n    uiConnect: (props: DaoSettingsTabUIProps) => ({\n        content: <DaoSettingsTabUI {...props} />,\n        name: \"Settings\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { TokenBalances, type TokenBalancesModule } from \"../../../widgets\";\n\nimport \"./funds.scss\";\n\ninterface DaoFundsTabUIProps extends HTMLProps<HTMLDivElement>, TokenBalancesModule.Inputs {}\n\nconst _DaoFundsTab = \"DaoFundsTab\";\n\nconst DaoFundsTabUI = ({ className, adapters, ...props }: DaoFundsTabUIProps) => (\n    <div\n        className={clsx(_DaoFundsTab, className)}\n        {...props}\n    >\n        <TokenBalances.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoFundsTab = {\n    uiConnect: (props: DaoFundsTabUIProps) => ({\n        content: <DaoFundsTabUI {...props} />,\n        lazy: true,\n        name: \"Funds\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { ComponentProps, HTMLProps } from \"react\";\n\nimport { Job } from \"../../../entities\";\n\nimport \"./jobs.scss\";\n\ninterface DaoJobsTabUIProps extends HTMLProps<HTMLDivElement>, ComponentProps<typeof Job.EntriesTable> {}\n\nconst _DaoJobsTab = \"DaoJobsTab\";\n\nconst DaoJobsTabUI = ({ className, multicallInstance, ...props }: DaoJobsTabUIProps) => (\n    <div\n        className={clsx(_DaoJobsTab, className)}\n        {...props}\n    >\n        <Job.EntriesTable {...{ multicallInstance }} />\n    </div>\n);\n\nexport const DaoJobsTab = {\n    uiConnect: (props: DaoJobsTabUIProps) => ({\n        content: <DaoJobsTabUI {...props} />,\n        lazy: true,\n        name: \"Jobs\",\n    }),\n};\n"],"names":["$0b43c5af87218925$export$2e2bcd8739ae039","parcelRequire","DaoPage","$kE6vJ","Ctx","Wallet","trySelectorContext","_DaoPage","Component","setFormData","newFormData","callback","this","setState","formData","state","toMulticallAddress","addr","args","string","ensure","intoBaseAddress","append","Multicall","FACTORY_ADDRESS","cast","async","dao","currentTime","Big","Date","now","times","lastProposalId","proposalPeriod","policy","proposal_period","activeProposals","getProposals","from_index","limit","filter","proposal","kind","FunctionCall","receiver_id","actions","_proposal_kind_FunctionCall_actions_","method_name","status","submission_time","add","gt","length","lastProposal","pop","proposal_id","id","proposal_info","onAddressesUpdated","e","_this_formikSetValues","detail","multicall","formikSetValues","call","createMulticall","accountId","context","loading","proposed","proposedInfo","noMulticall","noDao","fields","schema","fee","ready","multicallAddress","depo","plus","MI","MIN_BALANCE","daoSearchInput","document","querySelector","canPropose","checkUserPermission","canApprove","description","Base64","encode","JSON","stringify","multicall_init_args","admin_accounts","address","croncat_manager","window","nearConfig","CRONCAT_MANAGER_ADDRESS","job_bond","proposal_bond","public_key","deposit","toFixed","gas","toGas","isBad","lastAddr","value","$bbzbN","jsxs","Fragment","className","jsx","href","getDaoUrl","SputnikUI","ASTRO_UI","target","rel","onClick","addProposal","then","tx","signAndSendTxs","votes","getProposalUrl","actProposal","toLink","deleteIcon","intoUrl","$eGhT9","default","job","$v5kPS","is_active","$66p6C","$hRwrB","tryLoadInfo","check","SputnikDAO","confidentlyLoadOnlyDaoInfo","confidentlyLoadInfo","init","catch","newDao","proposalData","proposalAlreadyExists","daoAddress","Promise","all","newMulticall","getContent","selector","walletSelector","isSignedIn","displayErrorsList","displayErrors","Object","entries","k","v","includes","map","message","admins","tokensWhitelist","jobBond","$jTKS4","Tabs","classes","root","buttonsPanel","contentSpace","items","DaoSettingsTab","uiConnect","adapters","DaoFundsTab","DaoJobsTab","multicallInstance","console","error","componentDidMount","SIDEBAR","switchPage","addEventListener","event","render","STORAGE","$1ZNeQ","Formik","initialValues","addresses","validate","values","tryLoadInfoDebounced","onSubmit","setValues","Form","$6i49h","TextField","name","placeholder","hiddenLabel","variant","autoFocus","constructor","props","super","object","shape","noAddress","retain","initial","sputnikDao","customMessage","transform","_","debounce","getFactoryFee","multicallFactoryFee","contextType","$6PKLM","$4716c71758a2de05$export$2e2bcd8739ae039","d","$d0108da3d73167d3$export$2e2bcd8739ae039","DaoSettingsTabUI","clsx","$4ys6O","SettingsEditor","UI","content","$ebf4eb727c1b9f93$var$DaoSettingsTabUI","DaoFundsTabUI","TokenBalances","$d60b2e5741d61057$var$DaoFundsTabUI","lazy","DaoJobsTabUI","$gHnkO","Job","EntriesTable","$3bd8ce08f89cad89$var$DaoJobsTabUI"],"version":3,"file":"dao.5543b177.js.map"}