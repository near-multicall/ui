{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,O,c,C,E,O,C,a,C,M,C,E,a,C,C,G,E,E,O,C,U,W,O,C,GCCA,IAAA,EAAewB,A,E,SAAAA,OAAAA,A,G,E,Q,S,C,C,C,E,E,E,O,C,U,W,O,C,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SCsBf,IAAM2Q,EAAMlP,AAAAA,CAAAA,EAAAA,EAAAA,MAAAA,AAAAA,EAAOC,kBAAkB,GAe/BoP,EAAW,SACV,OAAM9Q,UAAgB4B,EAAAA,SAAAA,CA4DzBC,YAAYC,CAA8B,CAAEC,CAAiC,CAAE,CAC3E,IAAI,CAACC,QAAQ,CACT,CACIC,SAAU,CACN,GAAG,IAAI,CAACC,KAAK,CAACD,QAAQ,CACtB,GAAGH,CAAH,AACJ,CACJ,EACAC,EAER,CAEAI,mBAAmBC,CAAY,CAAU,CACrC,MAAOC,AAAAA,CAAAA,EAAAA,EAAAA,IAAAA,AAAAA,EACFC,MAAM,GACNC,MAAM,GACNC,eAAe,GACfC,MAAM,CAAC,IAAMC,AAAAA,EAAAA,SAAAA,CAAUC,eAAe,EACtCC,IAAI,CAACR,EACd,CAQA,MAAMS,sBACFC,CAAe,CACuD,CAEtE,IAAMC,EAAcC,AAAAA,CAAAA,EAAAA,EAAAA,GAAAA,AAAAA,EAAIC,KAAKC,GAAG,IAAIC,KAAK,CAAC,WACpCC,EAAiBN,EAAIM,cAAc,CACnCC,EAAiBP,EAAIQ,MAAM,CAACC,eAAe,CAQ3CC,EAAkBC,AALN,CAAA,MAAMX,EAAIY,YAAY,CAAC,CACrCC,WAAYP,EAAiB,IAAM,EAAIA,EAAiB,IACxDQ,MAAO,GACX,EAAA,EAEkCC,MAAM,CACnCC,AAAAA,IACG,IAEAA,EAAAA,EACAA,EAAAA,EAAAA,EAAAA,EADAA,MAAAA,AAAAA,CA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","sources":["<anon>","src/pages/dao/index.ts","src/pages/dao/dao.tsx","node_modules/@mui/icons-material/esm/PauseOutlined.js","node_modules/@mui/icons-material/esm/PlayArrowOutlined.js","src/pages/dao/settings/settings.tsx","src/pages/dao/funds/funds.tsx","src/pages/dao/jobs/jobs.tsx"],"sourcesContent":["(function () {\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequired5b2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"52sUH\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", function () { return $76b7fb5bd4084ff2$export$2e2bcd8739ae039; });\n\nvar $1V0Jk = parcelRequire(\"1V0Jk\");\nvar $76b7fb5bd4084ff2$export$2e2bcd8739ae039 = (0, $1V0Jk.DaoPage);\n\n});\nparcelRegister(\"1V0Jk\", function(module, exports) {\n\n$parcel$export(module.exports, \"DaoPage\", function () { return $431ec27c8b907096$export$a71eafe0644784a3; });\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\nvar $2K4Gt = parcelRequire(\"2K4Gt\");\nvar $kA5ak = parcelRequire(\"kA5ak\");\nvar $lkyf4 = parcelRequire(\"lkyf4\");\nvar $5NwFW = parcelRequire(\"5NwFW\");\n\nvar $44iF5 = parcelRequire(\"44iF5\");\n\nvar $5DZ9j = parcelRequire(\"5DZ9j\");\n\nvar $6cds3 = parcelRequire(\"6cds3\");\n\nvar $dgThQ = parcelRequire(\"dgThQ\");\n\nvar $b58gW = parcelRequire(\"b58gW\");\n\nvar $kWoHO = parcelRequire(\"kWoHO\");\n\nvar $lcSfn = parcelRequire(\"lcSfn\");\n\nvar $41glQ = parcelRequire(\"41glQ\");\n\nvar $fkwEZ = parcelRequire(\"fkwEZ\");\n\nvar $cfywZ = parcelRequire(\"cfywZ\");\n\nvar $dc0x8 = parcelRequire(\"dc0x8\");\n\nvar $6qX7k = parcelRequire(\"6qX7k\");\n\nvar $hStsZ = parcelRequire(\"hStsZ\");\n\nvar $jpmSb = parcelRequire(\"jpmSb\");\n\nvar $gqEAf = parcelRequire(\"gqEAf\");\n\n\nvar $3vtly = parcelRequire(\"3vtly\");\n\nvar $dEazb = parcelRequire(\"dEazb\");\nconst $431ec27c8b907096$var$Ctx = (0, $dgThQ.Wallet).trySelectorContext();\nconst $431ec27c8b907096$var$_DaoPage = \"DaoPage\";\nclass $431ec27c8b907096$export$a71eafe0644784a3 extends (0, $6cds3.Component) {\n    setFormData(newFormData, callback) {\n        this.setState({\n            formData: {\n                ...this.state.formData,\n                ...newFormData\n            }\n        }, callback);\n    }\n    toMulticallAddress(addr) {\n        return (0, $kWoHO.args).string().ensure().intoBaseAddress().append(\".\" + (0, $41glQ.Multicall).FACTORY_ADDRESS).cast(addr);\n    }\n    /**\n   * check if DAO has a proposal to create multicall instance.\n   * proposal must be in progress, and not expired.\n   *\n   * @returns {object} ID and info of proposal to create multicall instance,\n   */ async proposalAlreadyExists(dao) {\n        // Date.now() returns timestamp in milliseconds, SputnikDAO uses nanoseconds\n        const currentTime = (0, $cfywZ.Big)(Date.now()).times(\"1000000\");\n        const lastProposalId = dao.lastProposalId;\n        const proposalPeriod = dao.policy.proposal_period;\n        // get last 100 DAO proposals\n        const proposals = await dao.getProposals({\n            from_index: lastProposalId < 100 ? 0 : lastProposalId - 100,\n            limit: 100\n        });\n        // Look for active \"Create multicall\" proposals\n        const activeProposals = proposals.filter((proposal)=>{\n            var // discard if not active proposal to create multicall instance\n            _proposal_kind_FunctionCall, _proposal_kind, _proposal_kind_FunctionCall_actions_, _proposal_kind_FunctionCall_actions, _proposal_kind_FunctionCall1, _proposal_kind1;\n            return ((_proposal_kind = proposal.kind) === null || _proposal_kind === void 0 ? void 0 : (_proposal_kind_FunctionCall = _proposal_kind.FunctionCall) === null || _proposal_kind_FunctionCall === void 0 ? void 0 : _proposal_kind_FunctionCall.receiver_id) === (0, $41glQ.Multicall).FACTORY_ADDRESS && ((_proposal_kind1 = proposal.kind) === null || _proposal_kind1 === void 0 ? void 0 : (_proposal_kind_FunctionCall1 = _proposal_kind1.FunctionCall) === null || _proposal_kind_FunctionCall1 === void 0 ? void 0 : (_proposal_kind_FunctionCall_actions = _proposal_kind_FunctionCall1.actions) === null || _proposal_kind_FunctionCall_actions === void 0 ? void 0 : (_proposal_kind_FunctionCall_actions_ = _proposal_kind_FunctionCall_actions[0]) === null || _proposal_kind_FunctionCall_actions_ === void 0 ? void 0 : _proposal_kind_FunctionCall_actions_.method_name) === \"create\" && proposal.status === \"InProgress\" && (0, $cfywZ.Big)(proposal.submission_time).add(proposalPeriod).gt(currentTime);\n        });\n        // If there many \"Create multicall\" proposals, return latest.\n        if (activeProposals.length > 0) {\n            const lastProposal = activeProposals.pop();\n            return {\n                proposal_id: lastProposal.id,\n                proposal_info: lastProposal\n            };\n        } else return {\n            proposal_id: -1,\n            proposal_info: null\n        };\n    }\n    onAddressesUpdated(e) {\n        if (e.detail.dao !== this.state.formData.addr) {\n            var _this_formikSetValues, _this;\n            this.setState({\n                multicall: new (0, $41glQ.Multicall)(this.toMulticallAddress(e.detail.dao))\n            });\n            (_this_formikSetValues = (_this = this).formikSetValues) === null || _this_formikSetValues === void 0 ? void 0 : _this_formikSetValues.call(_this, {\n                addr: e.detail.dao\n            });\n        }\n    }\n    createMulticall() {\n        const { accountId: accountId } = this.context;\n        const { loading: loading, dao: dao, proposed: proposed, proposedInfo: proposedInfo, formData: formData } = this.state;\n        const { noMulticall: noMulticall, noDao: noDao } = (0, $lcSfn.fields)(this.schema, \"addr\");\n        if (this.fee === \"\" || // wallet not logged in or DAO object not initialized yet\n        (dao === null || dao === void 0 ? void 0 : dao.ready) !== true) return null;\n        const multicallAddress = this.toMulticallAddress(formData.addr);\n        const depo = (0, $cfywZ.Big)(this.fee).plus((0, $dgThQ.MI).MIN_BALANCE);\n        const daoSearchInput = document.querySelector(\".DaoSearch input\");\n        /**\n     * Can user propose a FunctionCall to DAO?\n     */ const canPropose = dao.checkUserPermission(accountId, \"AddProposal\", \"FunctionCall\");\n        /**\n     * Can user vote approve a FunctionCall on the DAO?\n     */ const canApprove = dao.checkUserPermission(accountId, \"VoteApprove\", \"FunctionCall\");\n        const args = {\n            proposal: {\n                description: `create multicall instance for this DAO at ${multicallAddress}`,\n                kind: {\n                    FunctionCall: {\n                        receiver_id: (0, $41glQ.Multicall).FACTORY_ADDRESS,\n                        actions: [\n                            {\n                                method_name: \"create\",\n                                args: (0, $44iF5.Base64).encode(JSON.stringify({\n                                    multicall_init_args: {\n                                        admin_accounts: [\n                                            dao.address\n                                        ],\n                                        croncat_manager: window.nearConfig.CRONCAT_MANAGER_ADDRESS,\n                                        job_bond: dao.policy.proposal_bond\n                                    },\n                                    public_key: \"HdJuXFRBKMEXuzEsXVscdd3aoBvEGGXDKQ3JoNhqJ4uU\"\n                                })),\n                                deposit: depo.toFixed(),\n                                gas: (0, $cfywZ.toGas)(\"150\")\n                            }\n                        ]\n                    }\n                }\n            }\n        };\n        if (noMulticall.isBad() && !noDao.isBad() && // base.sputnik-dao.near does not exist\n        !loading && // disappear while debouncing\n        this.lastAddr === daoSearchInput.value) {\n            if (proposed === -1) {\n                // no create multicall proposal exists\n                if (canPropose) // ... and user can propose FunctionCall\n                return /*#__PURE__*/ (0, $lBpE3.jsxs)((0, $lBpE3.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                            className: \"Alert\",\n                            children: [\n                                `A multicall instance can only be created for `,\n                                /*#__PURE__*/ (0, $lBpE3.jsx)(\"a\", {\n                                    href: dao.getDaoUrl((0, $fkwEZ.SputnikUI).ASTRO_UI),\n                                    target: \"_blank\",\n                                    rel: \"noopener noreferrer\",\n                                    children: dao.address\n                                }),\n                                ` by making a proposal.`\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"button\", {\n                            className: \"create-multicall\",\n                            onClick: ()=>{\n                                dao.addProposal(args).then((tx)=>(0, $6qX7k.signAndSendTxs)([\n                                        tx\n                                    ]));\n                            },\n                            children: \"Propose\"\n                        })\n                    ]\n                });\n                else // ... and user cannot propose FunctionCall\n                return /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                    className: \"Alert\",\n                    children: `This DAO has no multicall instance. A DAO member with proposing permissions should make a proposal.`\n                });\n            } else if (proposed !== -1) {\n                // create multicall proposal exists\n                if (!canApprove) // user does not have rights to VoteApprove\n                return /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                    className: \"Alert\",\n                    children: [\n                        `Proposal to create a multicall exists (#${proposed}), but you have no voting permissions on this DAO.`,\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"br\", {}),\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"a\", {\n                            target: \"_blank\",\n                            href: dao.getProposalUrl((0, $fkwEZ.SputnikUI).ASTRO_UI, proposed),\n                            rel: \"noopener noreferrer\",\n                            children: \"Proposal on Astro\"\n                        })\n                    ]\n                });\n                else if (proposedInfo === null || proposedInfo === void 0 ? void 0 : proposedInfo.votes[accountId]) // user can VoteApprove and already voted\n                return /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                    className: \"Alert\",\n                    children: [\n                        `You have voted on creating a multicall instance for this DAO. It will be created as soon as the proposal passes voting.`,\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"br\", {}),\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"a\", {\n                            target: \"_blank\",\n                            href: dao.getProposalUrl((0, $fkwEZ.SputnikUI).ASTRO_UI, proposed),\n                            rel: \"noopener noreferrer\",\n                            children: \"Proposal on Astro\"\n                        })\n                    ]\n                });\n                else // user can VoteApprove and did NOT vote yet.\n                return /*#__PURE__*/ (0, $lBpE3.jsxs)((0, $lBpE3.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                            className: \"Alert\",\n                            children: [\n                                `There exists a proposal (#${proposed}) to create a multicall instance for this DAO. `,\n                                /*#__PURE__*/ (0, $lBpE3.jsx)(\"a\", {\n                                    href: dao.getProposalUrl((0, $fkwEZ.SputnikUI).ASTRO_UI, proposed),\n                                    target: \"_blank\",\n                                    rel: \"noopener noreferrer\",\n                                    children: \"Open on AstroDAO\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $lBpE3.jsx)(\"button\", {\n                            className: \"create-multicall proposal-exists\",\n                            onClick: ()=>{\n                                dao.actProposal(proposed, \"VoteApprove\").then((tx)=>(0, $6qX7k.signAndSendTxs)([\n                                        tx\n                                    ]));\n                            },\n                            children: `vote YES`\n                        })\n                    ]\n                });\n            }\n        }\n    }\n    toLink(address, deleteIcon = true) {\n        return /*#__PURE__*/ (0, $lBpE3.jsxs)(\"span\", {\n            children: [\n                /*#__PURE__*/ (0, $lBpE3.jsx)(\"a\", {\n                    href: (0, $kWoHO.args).string().address().intoUrl().cast(address),\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    children: address\n                }),\n                deleteIcon ? /*#__PURE__*/ (0, $lBpE3.jsx)((0, $2K4Gt.default), {}) : null\n            ]\n        });\n    }\n    job(job) {\n        return /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n            className: \"JobsList-item\",\n            children: [\n                /*#__PURE__*/ (0, $lBpE3.jsx)((0, $kA5ak.default), {}),\n                /*#__PURE__*/ (0, $lBpE3.jsx)((0, $2K4Gt.default), {}),\n                job.is_active ? /*#__PURE__*/ (0, $lBpE3.jsx)((0, $lkyf4.default), {}) : /*#__PURE__*/ (0, $lBpE3.jsx)((0, $5NwFW.default), {}),\n                /*#__PURE__*/ (0, $lBpE3.jsx)(\"pre\", {\n                    children: JSON.stringify(job, null, \"  \")\n                })\n            ]\n        });\n    }\n    tryLoadInfo() {\n        if (this.lastAddr === this.state.formData.addr) return;\n        this.lastAddr = this.state.formData.addr;\n        this.schema.check(this.state.formData).then(()=>{\n            const { noDao: noDao } = (0, $lcSfn.fields)(this.schema, \"addr\");\n            if (!this.schema.isBad()) // case 0: DAO and Multicall exist\n            this.confidentlyLoadInfo();\n            else if (!noDao.isBad()) // case 1: Only DAO exists\n            this.confidentlyLoadOnlyDaoInfo();\n            else // case 2: neither exist\n            this.setState({\n                proposed: -1,\n                proposedInfo: null,\n                dao: new (0, $fkwEZ.SputnikDAO)(this.state.formData.addr) // will be invalid\n            });\n        });\n    }\n    confidentlyLoadOnlyDaoInfo() {\n        const { addr: addr } = this.state.formData;\n        const multicallAddress = this.toMulticallAddress(addr);\n        this.setState({\n            loading: true\n        });\n        // initialize DAO object\n        (0, $fkwEZ.SputnikDAO).init(addr).catch((e)=>new (0, $fkwEZ.SputnikDAO)(addr)).then((newDao)=>{\n            // some error happened during DAO object init.\n            if (!newDao.ready) {\n                this.setState({\n                    dao: newDao,\n                    multicall: new (0, $41glQ.Multicall)(multicallAddress),\n                    loading: false\n                });\n                return;\n            } else this.proposalAlreadyExists(newDao).catch((e)=>{}).then((proposalData)=>{\n                var _proposalData_proposal_id, _proposalData_proposal_info;\n                return this.setState({\n                    dao: newDao,\n                    multicall: new (0, $41glQ.Multicall)(multicallAddress),\n                    loading: false,\n                    proposed: (_proposalData_proposal_id = proposalData === null || proposalData === void 0 ? void 0 : proposalData.proposal_id) !== null && _proposalData_proposal_id !== void 0 ? _proposalData_proposal_id : -1,\n                    proposedInfo: (_proposalData_proposal_info = proposalData === null || proposalData === void 0 ? void 0 : proposalData.proposal_info) !== null && _proposalData_proposal_info !== void 0 ? _proposalData_proposal_info : null\n                });\n            });\n        });\n    }\n    confidentlyLoadInfo() {\n        const { addr: daoAddress } = this.state.formData;\n        const multicallAddress = this.toMulticallAddress(daoAddress);\n        this.setState({\n            loading: true\n        });\n        Promise.all([\n            (0, $fkwEZ.SputnikDAO).init(daoAddress).catch((e)=>new (0, $fkwEZ.SputnikDAO)(daoAddress)),\n            (0, $41glQ.Multicall).init(multicallAddress).catch((e)=>new (0, $41glQ.Multicall)(multicallAddress))\n        ]).then(([newDao, newMulticall])=>{\n            // some error happened during DAO object init.\n            if (!newDao.ready || !newMulticall.ready) this.setState({\n                dao: newDao,\n                multicall: newMulticall,\n                loading: false\n            });\n            else this.proposalAlreadyExists(newDao).catch((e)=>{}).then((proposalData)=>{\n                var _proposalData_proposal_id, _proposalData_proposal_info;\n                return this.setState({\n                    dao: newDao,\n                    multicall: newMulticall,\n                    loading: false,\n                    proposed: (_proposalData_proposal_id = proposalData === null || proposalData === void 0 ? void 0 : proposalData.proposal_id) !== null && _proposalData_proposal_id !== void 0 ? _proposalData_proposal_id : -1,\n                    proposedInfo: (_proposalData_proposal_info = proposalData === null || proposalData === void 0 ? void 0 : proposalData.proposal_info) !== null && _proposalData_proposal_info !== void 0 ? _proposalData_proposal_info : null\n                });\n            });\n        });\n    }\n    getContent() {\n        const { selector: walletSelector } = this.context;\n        const { dao: dao, loading: loading, multicall: multicall } = this.state;\n        // if user not logged in, remind them to sign in.\n        // TODO: only require signIn when DAO has no multicall instance (to know if user can propose or vote on existing proposal to create multicall)\n        if (!walletSelector.isSignedIn()) return /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n            className: \"DaoPage-content error\",\n            children: \"Please sign in to continue\"\n        });\n        // errors to display\n        const displayErrorsList = [\n            \"noAddress\",\n            \"noDao\",\n            \"noMulticall\"\n        ];\n        const displayErrors = Object.entries((0, $lcSfn.fields)(this.schema, \"addr\")).filter(([k, v])=>v.isBad() && displayErrorsList.includes(k)).map(([k, v])=>/*#__PURE__*/ (0, $lBpE3.jsxs)(\"p\", {\n                className: \"red\",\n                children: [\n                    /*#__PURE__*/ (0, $lBpE3.jsxs)(\"span\", {\n                        children: [\n                            v.isBad() ? \"\\u2717\" : \"\\u2714\",\n                            \" \"\n                        ]\n                    }),\n                    v.message()\n                ]\n            }, `p-${k}`));\n        if (displayErrors.length > 0) return /*#__PURE__*/ (0, $lBpE3.jsx)((0, $lBpE3.Fragment), {\n            children: /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n                className: \"DaoPage-content error\",\n                children: [\n                    /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                        children: displayErrors\n                    }),\n                    this.createMulticall()\n                ]\n            })\n        });\n        if (loading) return /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n            className: \"DaoPage-content loader\"\n        });\n        /*\n     * Everything should be loaded\n     */ if (!multicall.admins || !multicall.tokensWhitelist || !multicall.jobBond) {\n            console.error(\"multicall infos incomplete\", multicall);\n            return /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                className: \"DaoPage-content error\",\n                children: \"Unexpected error! Multicall might be outdated.\"\n            });\n        }\n        return /*#__PURE__*/ (0, $lBpE3.jsx)((0, $hStsZ.Tabs), {\n            classes: {\n                root: \"DaoPage-tabs\",\n                buttonsPanel: \"DaoPage-tabs-buttonsPanel\",\n                contentSpace: \"DaoPage-tabs-contentSpace\"\n            },\n            items: [\n                (0, $gqEAf.DaoSettingsTab).uiConnect({\n                    className: `${$431ec27c8b907096$var$_DaoPage}-content`,\n                    adapters: {\n                        dao: dao,\n                        multicall: multicall\n                    }\n                }),\n                (0, $3vtly.DaoFundsTab).uiConnect({\n                    className: `${$431ec27c8b907096$var$_DaoPage}-content`,\n                    adapters: {\n                        dao: dao,\n                        multicall: multicall\n                    }\n                }),\n                (0, $dEazb.DaoJobsTab).uiConnect({\n                    className: `${$431ec27c8b907096$var$_DaoPage}-content`,\n                    multicallInstance: multicall\n                })\n            ]\n        });\n    }\n    componentDidMount() {\n        window.SIDEBAR.switchPage(\"dao\");\n        document.addEventListener(\"onaddressesupdated\", (event)=>this.onAddressesUpdated(event));\n    }\n    render() {\n        var _STORAGE_addresses_dao;\n        return /*#__PURE__*/ (0, $lBpE3.jsxs)(\"div\", {\n            className: \"DaoPage\",\n            children: [\n                /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                    className: \"DaoPage-header\",\n                    children: /*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n                        className: \"DaoSearch\",\n                        children: /*#__PURE__*/ (0, $lBpE3.jsx)((0, $b58gW.Formik), {\n                            initialValues: {\n                                addr: (_STORAGE_addresses_dao = (0, $dc0x8.STORAGE).addresses.dao) !== null && _STORAGE_addresses_dao !== void 0 ? _STORAGE_addresses_dao : \"\"\n                            },\n                            validate: (values)=>{\n                                this.setFormData({\n                                    addr: values.addr\n                                });\n                                this.tryLoadInfoDebounced();\n                            },\n                            onSubmit: ()=>{},\n                            children: ({ setValues: setValues })=>{\n                                this.formikSetValues = setValues;\n                                return /*#__PURE__*/ (0, $lBpE3.jsx)((0, $b58gW.Form), {\n                                    children: /*#__PURE__*/ (0, $lBpE3.jsx)((0, $jpmSb.TextField), {\n                                        name: \"addr\",\n                                        placeholder: \"Search for DAOs\",\n                                        hiddenLabel: true,\n                                        variant: \"standard\",\n                                        autoFocus: true\n                                    })\n                                });\n                            }\n                        })\n                    })\n                }),\n                this.getContent()\n            ]\n        });\n    }\n    constructor(props){\n        super(props);\n        this.schema = (0, $kWoHO.args).object().shape({\n            addr: (0, $kWoHO.args).object().shape({\n                noAddress: (0, $kWoHO.args).string().address().retain({\n                    initial: true\n                }),\n                noDao: (0, $kWoHO.args).string().sputnikDao().retain({\n                    initial: true\n                }),\n                noMulticall: (0, $kWoHO.args).string().multicall().retain({\n                    customMessage: \"DAO does not have a multicall instance\",\n                    initial: true\n                })\n            }).transform((_, addr)=>({\n                    noAddress: addr,\n                    noDao: addr,\n                    noMulticall: this.toMulticallAddress(addr)\n                })).retain()\n        }).retain();\n        this.tryLoadInfoDebounced = (0, (/*@__PURE__*/$parcel$interopDefault($5DZ9j)))(()=>this.tryLoadInfo(), 400);\n        this.fee = \"\";\n        const addr = (0, $dc0x8.STORAGE).addresses.dao;\n        this.state = {\n            formData: {\n                addr: addr\n            },\n            dao: new (0, $fkwEZ.SputnikDAO)(addr),\n            multicall: new (0, $41glQ.Multicall)(this.toMulticallAddress(addr)),\n            loading: false,\n            proposed: -1,\n            proposedInfo: null\n        };\n        this.schema.check(this.state.formData);\n        (0, $41glQ.Multicall).getFactoryFee().then((multicallFactoryFee)=>{\n            this.fee = multicallFactoryFee;\n            this.tryLoadInfo();\n        });\n        this.lastAddr = null;\n    }\n}\n$431ec27c8b907096$export$a71eafe0644784a3.contextType = $431ec27c8b907096$var$Ctx;\n\n});\nparcelRegister(\"lkyf4\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $f876070464c231e4$export$2e2bcd8739ae039; });\n\nvar $1SOLG = parcelRequire(\"1SOLG\");\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\"use client\";\nvar $f876070464c231e4$export$2e2bcd8739ae039 = (0, $1SOLG.default)(/*#__PURE__*/ (0, $lBpE3.jsx)(\"path\", {\n    d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), \"PauseOutlined\");\n\n});\n\nparcelRegister(\"5NwFW\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", function () { return $438ae002ac2d0d94$export$2e2bcd8739ae039; });\n\nvar $1SOLG = parcelRequire(\"1SOLG\");\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\"use client\";\nvar $438ae002ac2d0d94$export$2e2bcd8739ae039 = (0, $1SOLG.default)(/*#__PURE__*/ (0, $lBpE3.jsx)(\"path\", {\n    d: \"M10 8.64 15.27 12 10 15.36V8.64M8 5v14l11-7L8 5z\"\n}), \"PlayArrowOutlined\");\n\n});\n\nparcelRegister(\"gqEAf\", function(module, exports) {\n\n$parcel$export(module.exports, \"DaoSettingsTab\", function () { return $6ff53f3120bcabdd$export$1339648d672667b1; });\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\nvar $b8Wwb = parcelRequire(\"b8Wwb\");\n\nvar $b3WIu = parcelRequire(\"b3WIu\");\n\nconst $6ff53f3120bcabdd$var$_DaoSettingsTab = \"DaoSettingsTab\";\nconst $6ff53f3120bcabdd$var$DaoSettingsTabUI = ({ className: className, adapters: adapters, ...props })=>/*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n        className: (0, $b8Wwb.default)($6ff53f3120bcabdd$var$_DaoSettingsTab, className),\n        ...props,\n        children: /*#__PURE__*/ (0, $lBpE3.jsx)((0, $b3WIu.SettingsEditor).UI, {\n            adapters: adapters\n        })\n    });\nconst $6ff53f3120bcabdd$export$1339648d672667b1 = {\n    uiConnect: (props)=>({\n            content: /*#__PURE__*/ (0, $lBpE3.jsx)($6ff53f3120bcabdd$var$DaoSettingsTabUI, {\n                ...props\n            }),\n            name: \"Settings\"\n        })\n};\n\n});\n\nparcelRegister(\"3vtly\", function(module, exports) {\n\n$parcel$export(module.exports, \"DaoFundsTab\", function () { return $1a6a2e22793ede1e$export$a699f49d006bd69; });\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\nvar $b8Wwb = parcelRequire(\"b8Wwb\");\n\nvar $b3WIu = parcelRequire(\"b3WIu\");\n\nconst $1a6a2e22793ede1e$var$_DaoFundsTab = \"DaoFundsTab\";\nconst $1a6a2e22793ede1e$var$DaoFundsTabUI = ({ className: className, adapters: adapters, ...props })=>/*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n        className: (0, $b8Wwb.default)($1a6a2e22793ede1e$var$_DaoFundsTab, className),\n        ...props,\n        children: /*#__PURE__*/ (0, $lBpE3.jsx)((0, $b3WIu.TokenBalances).UI, {\n            adapters: adapters\n        })\n    });\nconst $1a6a2e22793ede1e$export$a699f49d006bd69 = {\n    uiConnect: (props)=>({\n            content: /*#__PURE__*/ (0, $lBpE3.jsx)($1a6a2e22793ede1e$var$DaoFundsTabUI, {\n                ...props\n            }),\n            lazy: true,\n            name: \"Funds\"\n        })\n};\n\n});\n\nparcelRegister(\"dEazb\", function(module, exports) {\n\n$parcel$export(module.exports, \"DaoJobsTab\", function () { return $bed995df4c766681$export$1ccd7c3fe7c2776f; });\n\nvar $lBpE3 = parcelRequire(\"lBpE3\");\n\nvar $b8Wwb = parcelRequire(\"b8Wwb\");\n\nvar $dgThQ = parcelRequire(\"dgThQ\");\n\nconst $bed995df4c766681$var$_DaoJobsTab = \"DaoJobsTab\";\nconst $bed995df4c766681$var$DaoJobsTabUI = ({ className: className, multicallInstance: multicallInstance, ...props })=>/*#__PURE__*/ (0, $lBpE3.jsx)(\"div\", {\n        className: (0, $b8Wwb.default)($bed995df4c766681$var$_DaoJobsTab, className),\n        ...props,\n        children: /*#__PURE__*/ (0, $lBpE3.jsx)((0, $dgThQ.Job).EntriesTable, {\n            multicallInstance: multicallInstance\n        })\n    });\nconst $bed995df4c766681$export$1ccd7c3fe7c2776f = {\n    uiConnect: (props)=>({\n            content: /*#__PURE__*/ (0, $lBpE3.jsx)($bed995df4c766681$var$DaoJobsTabUI, {\n                ...props\n            }),\n            lazy: true,\n            name: \"Jobs\"\n        })\n};\n\n});\n\n\n\n})();\n//# sourceMappingURL=dao.6bf8324b.js.map\n","import { DaoPage } from \"./dao\";\nexport default DaoPage;\n","import { DeleteOutline, EditOutlined, PauseOutlined, PlayArrowOutlined } from \"@mui/icons-material\";\nimport { Base64 } from \"js-base64\";\nimport debounce from \"lodash.debounce\";\nimport { Component, ContextType } from \"react\";\n\nimport { MI, Wallet } from \"../../entities\";\nimport { Form, Formik } from \"formik\";\nimport { args } from \"../../shared/lib/args/args\";\nimport { fields } from \"../../shared/lib/args/args-types/args-object\";\nimport { Multicall } from \"../../shared/lib/contracts/multicall\";\nimport type { ProposalOutput } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { SputnikDAO, SputnikUI } from \"../../shared/lib/contracts/sputnik-dao\";\nimport { Big, toGas, toYocto } from \"../../shared/lib/converter\";\nimport { STORAGE } from \"../../shared/lib/persistent\";\nimport { signAndSendTxs } from \"../../shared/lib/wallet\";\nimport { Tabs } from \"../../shared/ui/design\";\n\nimport { TextField } from \"../../shared/ui/form\";\nimport { DaoSettingsTab } from \"./settings/settings\";\nimport \"./dao.scss\";\nimport { DaoFundsTab } from \"./funds/funds\";\nimport { DaoJobsTab } from \"./jobs/jobs\";\n\nconst Ctx = Wallet.trySelectorContext();\n\ninterface Props {}\n\ninterface State {\n    formData: {\n        addr: string;\n    };\n    dao: SputnikDAO;\n    multicall: Multicall;\n    loading: boolean;\n    proposed: number;\n    proposedInfo: ProposalOutput | null;\n}\n\nconst _DaoPage = \"DaoPage\";\nexport class DaoPage extends Component<Props, State> {\n    static contextType = Ctx;\n    declare context: ContextType<typeof Ctx>;\n\n    schema = args\n        .object()\n        .shape({\n            addr: args\n                .object()\n                .shape({\n                    noAddress: args.string().address().retain({ initial: true }),\n                    noDao: args.string().sputnikDao().retain({ initial: true }),\n                    noMulticall: args.string().multicall().retain({\n                        customMessage: \"DAO does not have a multicall instance\",\n                        initial: true,\n                    }),\n                })\n                .transform((_, addr) => ({\n                    noAddress: addr,\n                    noDao: addr,\n                    noMulticall: this.toMulticallAddress(addr),\n                }))\n                .retain(),\n        })\n        .retain();\n\n    tryLoadInfoDebounced = debounce(() => this.tryLoadInfo(), 400);\n\n    lastAddr: string | null;\n    fee: string = \"\";\n    formikSetValues?: (fields: State[\"formData\"], shouldValidate?: boolean) => void;\n\n    constructor(props: Props) {\n        super(props);\n\n        const addr = STORAGE.addresses.dao;\n\n        this.state = {\n            formData: {\n                addr,\n            },\n\n            dao: new SputnikDAO(addr),\n            multicall: new Multicall(this.toMulticallAddress(addr)),\n\n            loading: false,\n            proposed: -1,\n            proposedInfo: null,\n        };\n\n        this.schema.check(this.state.formData);\n\n        Multicall.getFactoryFee().then((multicallFactoryFee) => {\n            this.fee = multicallFactoryFee;\n            this.tryLoadInfo();\n        });\n\n        this.lastAddr = null;\n    }\n\n    setFormData(newFormData: State[\"formData\"], callback?: () => void | undefined) {\n        this.setState(\n            {\n                formData: {\n                    ...this.state.formData,\n                    ...newFormData,\n                },\n            },\n            callback\n        );\n    }\n\n    toMulticallAddress(addr: string): string {\n        return args\n            .string()\n            .ensure()\n            .intoBaseAddress()\n            .append(\".\" + Multicall.FACTORY_ADDRESS)\n            .cast(addr);\n    }\n\n    /**\n     * check if DAO has a proposal to create multicall instance.\n     * proposal must be in progress, and not expired.\n     *\n     * @returns {object} ID and info of proposal to create multicall instance,\n     */\n    async proposalAlreadyExists(\n        dao: SputnikDAO\n    ): Promise<{ proposal_id: number; proposal_info: ProposalOutput | null }> {\n        // Date.now() returns timestamp in milliseconds, SputnikDAO uses nanoseconds\n        const currentTime = Big(Date.now()).times(\"1000000\");\n        const lastProposalId = dao.lastProposalId;\n        const proposalPeriod = dao.policy.proposal_period;\n\n        // get last 100 DAO proposals\n        const proposals = await dao.getProposals({\n            from_index: lastProposalId < 100 ? 0 : lastProposalId - 100,\n            limit: 100,\n        });\n        // Look for active \"Create multicall\" proposals\n        const activeProposals = proposals.filter(\n            (proposal) =>\n                // discard if not active proposal to create multicall instance\n\n                proposal.kind?.FunctionCall?.receiver_id === Multicall.FACTORY_ADDRESS &&\n                proposal.kind?.FunctionCall?.actions?.[0]?.method_name === \"create\" &&\n                proposal.status === \"InProgress\" &&\n                Big(proposal.submission_time).add(proposalPeriod).gt(currentTime)\n        );\n\n        // If there many \"Create multicall\" proposals, return latest.\n        if (activeProposals.length > 0) {\n            const lastProposal = activeProposals.pop()!;\n            return { proposal_id: lastProposal.id, proposal_info: lastProposal };\n        }\n        // No \"Create multicall\" proposals found.\n        else return { proposal_id: -1, proposal_info: null };\n    }\n\n    onAddressesUpdated(e: CustomEvent<{ dao: string }>) {\n        if (e.detail.dao !== this.state.formData.addr) {\n            this.setState({\n                multicall: new Multicall(this.toMulticallAddress(e.detail.dao)),\n            });\n            this.formikSetValues?.({ addr: e.detail.dao });\n        }\n    }\n\n    createMulticall() {\n        const { accountId } = this.context!;\n        const { loading, dao, proposed, proposedInfo, formData } = this.state;\n        const { noMulticall, noDao } = fields(this.schema, \"addr\");\n\n        if (\n            this.fee === \"\" ||\n            // wallet not logged in or DAO object not initialized yet\n            dao?.ready !== true\n        ) {\n            return null;\n        }\n\n        const multicallAddress = this.toMulticallAddress(formData.addr);\n\n        const depo = Big(this.fee).plus(MI.MIN_BALANCE);\n        const daoSearchInput: HTMLInputElement = document.querySelector(\".DaoSearch input\")!;\n\n        /**\n         * Can user propose a FunctionCall to DAO?\n         */\n        const canPropose = dao.checkUserPermission(accountId!, \"AddProposal\", \"FunctionCall\");\n\n        /**\n         * Can user vote approve a FunctionCall on the DAO?\n         */\n        const canApprove = dao.checkUserPermission(accountId!, \"VoteApprove\", \"FunctionCall\");\n\n        const args = {\n            proposal: {\n                description: `create multicall instance for this DAO at ${multicallAddress}`,\n                kind: {\n                    FunctionCall: {\n                        receiver_id: Multicall.FACTORY_ADDRESS,\n\n                        actions: [\n                            {\n                                method_name: \"create\",\n                                args: Base64.encode(\n                                    JSON.stringify({\n                                        multicall_init_args: {\n                                            admin_accounts: [dao.address],\n                                            croncat_manager: window.nearConfig.CRONCAT_MANAGER_ADDRESS,\n                                            job_bond: dao.policy.proposal_bond,\n                                        },\n\n                                        public_key: \"HdJuXFRBKMEXuzEsXVscdd3aoBvEGGXDKQ3JoNhqJ4uU\",\n                                    })\n                                ),\n\n                                deposit: depo.toFixed(),\n                                gas: toGas(\"150\"),\n                            },\n                        ],\n                    },\n                },\n            },\n        };\n\n        if (\n            noMulticall.isBad() &&\n            !noDao.isBad() && // base.sputnik-dao.near does not exist\n            !loading &&\n            // disappear while debouncing\n            this.lastAddr === daoSearchInput.value\n        ) {\n            if (proposed === -1) {\n                // no create multicall proposal exists\n\n                if (canPropose) {\n                    // ... and user can propose FunctionCall\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`A multicall instance can only be created for `}\n\n                                <a\n                                    href={dao.getDaoUrl(SputnikUI.ASTRO_UI)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {dao.address}\n                                </a>\n\n                                {` by making a proposal.`}\n                            </div>\n\n                            <button\n                                className=\"create-multicall\"\n                                onClick={() => {\n                                    dao.addProposal(args).then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                Propose\n                            </button>\n                        </>\n                    );\n                } else {\n                    // ... and user cannot propose FunctionCall\n\n                    return (\n                        <div className=\"Alert\">\n                            {/* hint: you can use \"ref-community-board-testnet\" as DAO to get to this message */}\n                            {`This DAO has no multicall instance. A DAO member with proposing permissions should make a proposal.`}\n                        </div>\n                    );\n                }\n            } else if (proposed !== -1) {\n                // create multicall proposal exists\n\n                if (!canApprove) {\n                    // user does not have rights to VoteApprove\n\n                    return (\n                        <div className=\"Alert\">\n                            {`Proposal to create a multicall exists (#${proposed}), but you have no voting permissions on this DAO.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else if (proposedInfo?.votes[accountId!]) {\n                    // user can VoteApprove and already voted\n\n                    return (\n                        <div className=\"Alert\">\n                            {`You have voted on creating a multicall instance for this DAO. It will be created as soon as the proposal passes voting.`}\n                            <br />\n                            <a\n                                target=\"_blank\"\n                                href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                rel=\"noopener noreferrer\"\n                            >\n                                Proposal on Astro\n                            </a>\n                        </div>\n                    );\n                } else {\n                    // user can VoteApprove and did NOT vote yet.\n\n                    return (\n                        <>\n                            <div className=\"Alert\">\n                                {/* hint: you can use \"genesis\" or \"test\" as DAO to get to this message */}\n                                {`There exists a proposal (#${proposed}) to create a multicall instance for this DAO. `}\n\n                                <a\n                                    href={dao.getProposalUrl(SputnikUI.ASTRO_UI, proposed)}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Open on AstroDAO\n                                </a>\n                            </div>\n\n                            <button\n                                className=\"create-multicall proposal-exists\"\n                                onClick={() => {\n                                    dao.actProposal(proposed, \"VoteApprove\").then((tx) => signAndSendTxs([tx]));\n                                }}\n                            >\n                                {`vote YES`}\n                            </button>\n                        </>\n                    );\n                }\n            }\n        }\n    }\n\n    toLink(address: string, deleteIcon = true) {\n        return (\n            <span>\n                <a\n                    href={args.string().address().intoUrl().cast(address)}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {address}\n                </a>\n                {deleteIcon ? <DeleteOutline /> : null}\n            </span>\n        );\n    }\n\n    job(job: any) {\n        return (\n            <div className=\"JobsList-item\">\n                <EditOutlined />\n                <DeleteOutline />\n                {job.is_active ? <PauseOutlined /> : <PlayArrowOutlined />}\n                <pre>{JSON.stringify(job, null, \"  \")}</pre>\n            </div>\n        );\n    }\n\n    tryLoadInfo() {\n        if (this.lastAddr === this.state.formData.addr) return;\n        this.lastAddr = this.state.formData.addr;\n        this.schema.check(this.state.formData).then(() => {\n            const { noDao } = fields(this.schema, \"addr\");\n            if (!this.schema.isBad()) {\n                // case 0: DAO and Multicall exist\n                this.confidentlyLoadInfo();\n            } else if (!noDao.isBad()) {\n                // case 1: Only DAO exists\n                this.confidentlyLoadOnlyDaoInfo();\n            } else {\n                // case 2: neither exist\n                this.setState({\n                    proposed: -1,\n                    proposedInfo: null,\n                    dao: new SputnikDAO(this.state.formData.addr), // will be invalid\n                });\n            }\n        });\n    }\n\n    confidentlyLoadOnlyDaoInfo() {\n        const { addr } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(addr);\n\n        this.setState({ loading: true });\n\n        // initialize DAO object\n        SputnikDAO.init(addr)\n            .catch((e) => new SputnikDAO(addr))\n            .then((newDao) => {\n                // some error happened during DAO object init.\n                if (!newDao.ready) {\n                    this.setState({\n                        dao: newDao,\n                        multicall: new Multicall(multicallAddress),\n                        loading: false,\n                    });\n                    return;\n                } else {\n                    this.proposalAlreadyExists(newDao)\n                        .catch((e) => {})\n                        .then((proposalData) =>\n                            this.setState({\n                                dao: newDao,\n                                multicall: new Multicall(multicallAddress),\n                                loading: false,\n                                proposed: proposalData?.proposal_id ?? -1,\n                                proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                            })\n                        );\n                }\n            });\n    }\n\n    confidentlyLoadInfo() {\n        const { addr: daoAddress } = this.state.formData;\n\n        const multicallAddress = this.toMulticallAddress(daoAddress);\n\n        this.setState({ loading: true });\n\n        Promise.all([\n            SputnikDAO.init(daoAddress).catch((e) => new SputnikDAO(daoAddress)),\n            Multicall.init(multicallAddress).catch((e) => new Multicall(multicallAddress)),\n        ]).then(([newDao, newMulticall]) => {\n            // some error happened during DAO object init.\n            if (!newDao.ready || !newMulticall.ready) {\n                this.setState({\n                    dao: newDao,\n                    multicall: newMulticall,\n                    loading: false,\n                });\n            } else {\n                this.proposalAlreadyExists(newDao)\n                    .catch((e) => {})\n                    .then((proposalData) =>\n                        this.setState({\n                            dao: newDao,\n                            multicall: newMulticall,\n                            loading: false,\n                            proposed: proposalData?.proposal_id ?? -1,\n                            proposedInfo: (proposalData?.proposal_info as ProposalOutput) ?? null,\n                        })\n                    );\n            }\n        });\n    }\n\n    getContent() {\n        const { selector: walletSelector } = this.context!;\n        const { dao, loading, multicall } = this.state;\n\n        // if user not logged in, remind them to sign in.\n        // TODO: only require signIn when DAO has no multicall instance (to know if user can propose or vote on existing proposal to create multicall)\n        if (!walletSelector.isSignedIn()) {\n            return <div className=\"DaoPage-content error\">Please sign in to continue</div>;\n        }\n\n        // errors to display\n        const displayErrorsList = [\"noAddress\", \"noDao\", \"noMulticall\"];\n        const displayErrors = Object.entries(fields(this.schema, \"addr\"))\n            .filter(([k, v]) => v.isBad() && displayErrorsList.includes(k))\n            .map(([k, v]) => (\n                <p\n                    key={`p-${k}`}\n                    className={\"red\"}\n                >\n                    <span>{v.isBad() ? \"\\u2717\" : \"\\u2714\"} </span>\n                    {v.message()}\n                </p>\n            ));\n\n        if (displayErrors.length > 0)\n            return (\n                <>\n                    <div className=\"DaoPage-content error\">\n                        <div>{displayErrors}</div>\n                        {this.createMulticall()}\n                    </div>\n                </>\n            );\n\n        if (loading) return <div className=\"DaoPage-content loader\" />;\n\n        /*\n         * Everything should be loaded\n         */\n        if (!multicall.admins || !multicall.tokensWhitelist || !multicall.jobBond) {\n            console.error(\"multicall infos incomplete\", multicall);\n            return <div className=\"DaoPage-content error\">Unexpected error! Multicall might be outdated.</div>;\n        }\n\n        return (\n            <Tabs\n                classes={{\n                    root: \"DaoPage-tabs\",\n                    buttonsPanel: \"DaoPage-tabs-buttonsPanel\",\n                    contentSpace: \"DaoPage-tabs-contentSpace\",\n                }}\n                items={[\n                    DaoSettingsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoFundsTab.uiConnect({ className: `${_DaoPage}-content`, adapters: { dao, multicall } }),\n                    DaoJobsTab.uiConnect({ className: `${_DaoPage}-content`, multicallInstance: multicall }),\n                ]}\n            />\n        );\n    }\n\n    componentDidMount(): void {\n        window.SIDEBAR.switchPage(\"dao\");\n        document.addEventListener(\"onaddressesupdated\", (event) => this.onAddressesUpdated(event as CustomEvent));\n    }\n\n    render() {\n        return (\n            <div className=\"DaoPage\">\n                <div className=\"DaoPage-header\">\n                    <div className=\"DaoSearch\">\n                        <Formik\n                            initialValues={{ addr: STORAGE.addresses.dao ?? \"\" }}\n                            validate={(values) => {\n                                this.setFormData({ addr: values.addr });\n                                this.tryLoadInfoDebounced();\n                            }}\n                            onSubmit={() => {}}\n                        >\n                            {({ setValues }) => {\n                                this.formikSetValues = setValues;\n\n                                return (\n                                    <Form>\n                                        <TextField\n                                            name=\"addr\"\n                                            placeholder=\"Search for DAOs\"\n                                            hiddenLabel={true}\n                                            variant=\"standard\"\n                                            autoFocus\n                                        />\n                                    </Form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n\n                {this.getContent()}\n            </div>\n        );\n    }\n}\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"\n}), 'PauseOutlined');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 8.64 15.27 12 10 15.36V8.64M8 5v14l11-7L8 5z\"\n}), 'PlayArrowOutlined');","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { SettingsEditor, SettingsEditorModule } from \"../../../widgets\";\n\nimport \"./settings.scss\";\n\ninterface DaoSettingsTabUIProps extends HTMLProps<HTMLDivElement>, SettingsEditorModule.Inputs {}\n\nconst _DaoSettingsTab = \"DaoSettingsTab\";\n\nconst DaoSettingsTabUI = ({ className, adapters, ...props }: DaoSettingsTabUIProps) => (\n    <div\n        className={clsx(_DaoSettingsTab, className)}\n        {...props}\n    >\n        <SettingsEditor.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoSettingsTab = {\n    uiConnect: (props: DaoSettingsTabUIProps) => ({\n        content: <DaoSettingsTabUI {...props} />,\n        name: \"Settings\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { HTMLProps } from \"react\";\n\nimport { TokenBalances, type TokenBalancesModule } from \"../../../widgets\";\n\nimport \"./funds.scss\";\n\ninterface DaoFundsTabUIProps extends HTMLProps<HTMLDivElement>, TokenBalancesModule.Inputs {}\n\nconst _DaoFundsTab = \"DaoFundsTab\";\n\nconst DaoFundsTabUI = ({ className, adapters, ...props }: DaoFundsTabUIProps) => (\n    <div\n        className={clsx(_DaoFundsTab, className)}\n        {...props}\n    >\n        <TokenBalances.UI {...{ adapters }} />\n    </div>\n);\n\nexport const DaoFundsTab = {\n    uiConnect: (props: DaoFundsTabUIProps) => ({\n        content: <DaoFundsTabUI {...props} />,\n        lazy: true,\n        name: \"Funds\",\n    }),\n};\n","import clsx from \"clsx\";\nimport { ComponentProps, HTMLProps } from \"react\";\n\nimport { Job } from \"../../../entities\";\n\nimport \"./jobs.scss\";\n\ninterface DaoJobsTabUIProps extends HTMLProps<HTMLDivElement>, ComponentProps<typeof Job.EntriesTable> {}\n\nconst _DaoJobsTab = \"DaoJobsTab\";\n\nconst DaoJobsTabUI = ({ className, multicallInstance, ...props }: DaoJobsTabUIProps) => (\n    <div\n        className={clsx(_DaoJobsTab, className)}\n        {...props}\n    >\n        <Job.EntriesTable {...{ multicallInstance }} />\n    </div>\n);\n\nexport const DaoJobsTab = {\n    uiConnect: (props: DaoJobsTabUIProps) => ({\n        content: <DaoJobsTabUI {...props} />,\n        lazy: true,\n        name: \"Jobs\",\n    }),\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","value","$76b7fb5bd4084ff2$export$2e2bcd8739ae039","$1V0Jk","DaoPage","$431ec27c8b907096$export$a71eafe0644784a3","$lBpE3","$2K4Gt","$kA5ak","$lkyf4","$5NwFW","$44iF5","$5DZ9j","$6cds3","$dgThQ","$b58gW","$kWoHO","$lcSfn","$41glQ","$fkwEZ","$cfywZ","$dc0x8","$6qX7k","$hStsZ","$jpmSb","$gqEAf","$3vtly","$dEazb","$431ec27c8b907096$var$Ctx","Wallet","trySelectorContext","$431ec27c8b907096$var$_DaoPage","Component","setFormData","newFormData","callback","setState","formData","state","toMulticallAddress","addr","args","string","ensure","intoBaseAddress","append","Multicall","FACTORY_ADDRESS","cast","proposalAlreadyExists","dao","currentTime","Big","Date","now","times","lastProposalId","proposalPeriod","policy","proposal_period","activeProposals","proposals","getProposals","from_index","limit","filter","proposal","_proposal_kind_FunctionCall","_proposal_kind","_proposal_kind_FunctionCall_actions_","_proposal_kind_FunctionCall_actions","_proposal_kind_FunctionCall1","_proposal_kind1","kind","FunctionCall","receiver_id","actions","method_name","status","submission_time","add","gt","length","proposal_id","proposal_info","lastProposal","pop","id","onAddressesUpdated","detail","_this_formikSetValues","multicall","formikSetValues","call","createMulticall","accountId","context","loading","proposed","proposedInfo","noMulticall","noDao","fields","schema","fee","ready","multicallAddress","depo","plus","MI","MIN_BALANCE","daoSearchInput","document","querySelector","canPropose","checkUserPermission","canApprove","description","Base64","encode","JSON","stringify","multicall_init_args","admin_accounts","address","croncat_manager","nearConfig","CRONCAT_MANAGER_ADDRESS","job_bond","proposal_bond","public_key","deposit","toFixed","gas","toGas","isBad","lastAddr","jsxs","Fragment","children","className","jsx","href","getDaoUrl","SputnikUI","ASTRO_UI","target","rel","onClick","addProposal","then","tx","signAndSendTxs","votes","getProposalUrl","actProposal","toLink","deleteIcon","intoUrl","default","job","is_active","tryLoadInfo","check","SputnikDAO","confidentlyLoadOnlyDaoInfo","confidentlyLoadInfo","init","catch","newDao","proposalData","_proposalData_proposal_id","_proposalData_proposal_info","daoAddress","Promise","all","newMulticall","getContent","selector","walletSelector","isSignedIn","displayErrorsList","displayErrors","entries","k","includes","map","message","admins","tokensWhitelist","jobBond","Tabs","classes","root","buttonsPanel","contentSpace","items","DaoSettingsTab","uiConnect","adapters","DaoFundsTab","DaoJobsTab","multicallInstance","console","error","componentDidMount","SIDEBAR","switchPage","addEventListener","event","render","_STORAGE_addresses_dao","Formik","initialValues","STORAGE","addresses","validate","values","tryLoadInfoDebounced","onSubmit","setValues","Form","TextField","name","placeholder","hiddenLabel","variant","autoFocus","constructor","props","object","shape","noAddress","retain","initial","sputnikDao","customMessage","transform","_","a","__esModule","getFactoryFee","multicallFactoryFee","contextType","$f876070464c231e4$export$2e2bcd8739ae039","$1SOLG","d","$438ae002ac2d0d94$export$2e2bcd8739ae039","$6ff53f3120bcabdd$export$1339648d672667b1","$b8Wwb","$b3WIu","$6ff53f3120bcabdd$var$DaoSettingsTabUI","SettingsEditor","UI","content","$1a6a2e22793ede1e$export$a699f49d006bd69","$1a6a2e22793ede1e$var$DaoFundsTabUI","TokenBalances","lazy","$bed995df4c766681$export$1ccd7c3fe7c2776f","$bed995df4c766681$var$DaoJobsTabUI","Job","EntriesTable","DeleteOutline","EditOutlined","PauseOutlined","PlayArrowOutlined","debounce","ContextType","ProposalOutput","toYocto","Ctx","Props","State","_DaoPage","shouldValidate","CustomEvent","HTMLInputElement","clsx","HTMLProps","SettingsEditorModule","DaoSettingsTabUIProps","HTMLDivElement","Inputs","_DaoSettingsTab","DaoSettingsTabUI","TokenBalancesModule","DaoFundsTabUIProps","_DaoFundsTab","DaoFundsTabUI","ComponentProps","DaoJobsTabUIProps","_DaoJobsTab","DaoJobsTabUI"],"version":3,"file":"dao.6bf8324b.js.map"}